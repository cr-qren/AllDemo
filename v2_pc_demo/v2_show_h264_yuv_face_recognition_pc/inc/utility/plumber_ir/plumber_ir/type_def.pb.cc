// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plumber_ir/type_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plumber_ir/type_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace plumber_ir {

namespace {

const ::google::protobuf::Descriptor* FloatParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixedParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntParamDef_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_plumber_5fir_2ftype_5fdef_2eproto() {
  protobuf_AddDesc_plumber_5fir_2ftype_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "plumber_ir/type_def.proto");
  GOOGLE_CHECK(file != NULL);
  FloatParamDef_descriptor_ = file->message_type(0);
  static const int FloatParamDef_offsets_[1] = {
  };
  FloatParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatParamDef_descriptor_,
      FloatParamDef::default_instance_,
      FloatParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatParamDef));
  FixedParamDef_descriptor_ = file->message_type(1);
  static const int FixedParamDef_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedParamDef, bit_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedParamDef, num_frac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedParamDef, signed__),
  };
  FixedParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixedParamDef_descriptor_,
      FixedParamDef::default_instance_,
      FixedParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixedParamDef));
  IntParamDef_descriptor_ = file->message_type(2);
  static const int IntParamDef_offsets_[1] = {
  };
  IntParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntParamDef_descriptor_,
      IntParamDef::default_instance_,
      IntParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntParamDef));
  DataType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_plumber_5fir_2ftype_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatParamDef_descriptor_, &FloatParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixedParamDef_descriptor_, &FixedParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntParamDef_descriptor_, &IntParamDef::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_plumber_5fir_2ftype_5fdef_2eproto() {
  delete FloatParamDef::default_instance_;
  delete FloatParamDef_reflection_;
  delete FixedParamDef::default_instance_;
  delete FixedParamDef_reflection_;
  delete IntParamDef::default_instance_;
  delete IntParamDef_reflection_;
}

void protobuf_AddDesc_plumber_5fir_2ftype_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031plumber_ir/type_def.proto\022\nplumber_ir\""
    "\017\n\rFloatParamDef\"J\n\rFixedParamDef\022\021\n\tbit"
    "_width\030\001 \002(\005\022\020\n\010num_frac\030\002 \002(\005\022\024\n\006signed"
    "\030\003 \001(\010:\004true\"\r\n\013IntParamDef*\352\020\n\010DataType"
    "\022\t\n\005FLOAT\020\000\022\t\n\005FIXED\020\001\022\007\n\003INT\020\002\022\r\n\tT_FIX"
    "ED32\020\003\022\r\n\tT_FIXED16\020\004\022\014\n\010T_FIXED8\020\005\022\013\n\007T"
    "_FLOAT\020\006\022\020\n\014T_FIXED8_1_U\020\007\022\020\n\014T_FIXED8_1"
    "_S\020\010\022\020\n\014T_FIXED8_2_U\020\t\022\020\n\014T_FIXED8_2_S\020\n"
    "\022\020\n\014T_FIXED8_3_U\020\013\022\020\n\014T_FIXED8_3_S\020\014\022\020\n\014"
    "T_FIXED8_4_U\020\r\022\020\n\014T_FIXED8_4_S\020\016\022\020\n\014T_FI"
    "XED8_5_U\020\017\022\020\n\014T_FIXED8_5_S\020\020\022\020\n\014T_FIXED8"
    "_6_U\020\021\022\020\n\014T_FIXED8_6_S\020\022\022\020\n\014T_FIXED8_7_U"
    "\020\023\022\020\n\014T_FIXED8_7_S\020\024\022\021\n\rT_FIXED16_1_U\020\025\022"
    "\021\n\rT_FIXED16_1_S\020\026\022\021\n\rT_FIXED16_2_U\020\027\022\021\n"
    "\rT_FIXED16_2_S\020\030\022\021\n\rT_FIXED16_3_U\020\031\022\021\n\rT"
    "_FIXED16_3_S\020\032\022\021\n\rT_FIXED16_4_U\020\033\022\021\n\rT_F"
    "IXED16_4_S\020\034\022\021\n\rT_FIXED16_5_U\020\035\022\021\n\rT_FIX"
    "ED16_5_S\020\036\022\021\n\rT_FIXED16_6_U\020\037\022\021\n\rT_FIXED"
    "16_6_S\020 \022\021\n\rT_FIXED16_7_U\020!\022\021\n\rT_FIXED16"
    "_7_S\020\"\022\021\n\rT_FIXED16_8_U\020#\022\021\n\rT_FIXED16_8"
    "_S\020$\022\021\n\rT_FIXED16_9_U\020%\022\021\n\rT_FIXED16_9_S"
    "\020&\022\022\n\016T_FIXED16_10_U\020\'\022\022\n\016T_FIXED16_10_S"
    "\020(\022\022\n\016T_FIXED16_11_U\020)\022\022\n\016T_FIXED16_11_S"
    "\020*\022\022\n\016T_FIXED16_12_U\020+\022\022\n\016T_FIXED16_12_S"
    "\020,\022\022\n\016T_FIXED16_13_U\020-\022\022\n\016T_FIXED16_13_S"
    "\020.\022\022\n\016T_FIXED16_14_U\020/\022\022\n\016T_FIXED16_14_S"
    "\0200\022\022\n\016T_FIXED16_15_U\0201\022\022\n\016T_FIXED16_15_S"
    "\0202\022\021\n\rT_FIXED32_1_U\0203\022\021\n\rT_FIXED32_1_S\0204"
    "\022\021\n\rT_FIXED32_2_U\0205\022\021\n\rT_FIXED32_2_S\0206\022\021"
    "\n\rT_FIXED32_3_U\0207\022\021\n\rT_FIXED32_3_S\0208\022\021\n\r"
    "T_FIXED32_4_U\0209\022\021\n\rT_FIXED32_4_S\020:\022\021\n\rT_"
    "FIXED32_5_U\020;\022\021\n\rT_FIXED32_5_S\020<\022\021\n\rT_FI"
    "XED32_6_U\020=\022\021\n\rT_FIXED32_6_S\020>\022\021\n\rT_FIXE"
    "D32_7_U\020\?\022\021\n\rT_FIXED32_7_S\020@\022\021\n\rT_FIXED3"
    "2_8_U\020A\022\021\n\rT_FIXED32_8_S\020B\022\021\n\rT_FIXED32_"
    "9_U\020C\022\021\n\rT_FIXED32_9_S\020D\022\022\n\016T_FIXED32_10"
    "_U\020E\022\022\n\016T_FIXED32_10_S\020F\022\022\n\016T_FIXED32_11"
    "_U\020G\022\022\n\016T_FIXED32_11_S\020H\022\022\n\016T_FIXED32_12"
    "_U\020I\022\022\n\016T_FIXED32_12_S\020J\022\022\n\016T_FIXED32_13"
    "_U\020K\022\022\n\016T_FIXED32_13_S\020L\022\022\n\016T_FIXED32_14"
    "_U\020M\022\022\n\016T_FIXED32_14_S\020N\022\022\n\016T_FIXED32_15"
    "_U\020O\022\022\n\016T_FIXED32_15_S\020P\022\022\n\016T_FIXED32_16"
    "_U\020Q\022\022\n\016T_FIXED32_16_S\020R\022\022\n\016T_FIXED32_17"
    "_U\020S\022\022\n\016T_FIXED32_17_S\020T\022\022\n\016T_FIXED32_18"
    "_U\020U\022\022\n\016T_FIXED32_18_S\020V\022\022\n\016T_FIXED32_19"
    "_U\020W\022\022\n\016T_FIXED32_19_S\020X\022\022\n\016T_FIXED32_20"
    "_U\020Y\022\022\n\016T_FIXED32_20_S\020Z\022\022\n\016T_FIXED32_21"
    "_U\020[\022\022\n\016T_FIXED32_21_S\020\\\022\022\n\016T_FIXED32_22"
    "_U\020]\022\022\n\016T_FIXED32_22_S\020^\022\022\n\016T_FIXED32_23"
    "_U\020_\022\022\n\016T_FIXED32_23_S\020`\022\022\n\016T_FIXED32_24"
    "_U\020a\022\022\n\016T_FIXED32_24_S\020b\022\022\n\016T_FIXED32_25"
    "_U\020c\022\022\n\016T_FIXED32_25_S\020d\022\022\n\016T_FIXED32_26"
    "_U\020e\022\022\n\016T_FIXED32_26_S\020f\022\022\n\016T_FIXED32_27"
    "_U\020g\022\022\n\016T_FIXED32_27_S\020h\022\022\n\016T_FIXED32_28"
    "_U\020i\022\022\n\016T_FIXED32_28_S\020j\022\022\n\016T_FIXED32_29"
    "_U\020k\022\022\n\016T_FIXED32_29_S\020l\022\022\n\016T_FIXED32_30"
    "_U\020m\022\022\n\016T_FIXED32_30_S\020n\022\022\n\016T_FIXED32_31"
    "_U\020o\022\022\n\016T_FIXED32_31_S\020p", 2304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plumber_ir/type_def.proto", &protobuf_RegisterTypes);
  FloatParamDef::default_instance_ = new FloatParamDef();
  FixedParamDef::default_instance_ = new FixedParamDef();
  IntParamDef::default_instance_ = new IntParamDef();
  FloatParamDef::default_instance_->InitAsDefaultInstance();
  FixedParamDef::default_instance_->InitAsDefaultInstance();
  IntParamDef::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_plumber_5fir_2ftype_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_plumber_5fir_2ftype_5fdef_2eproto {
  StaticDescriptorInitializer_plumber_5fir_2ftype_5fdef_2eproto() {
    protobuf_AddDesc_plumber_5fir_2ftype_5fdef_2eproto();
  }
} static_descriptor_initializer_plumber_5fir_2ftype_5fdef_2eproto_;
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FloatParamDef::FloatParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.FloatParamDef)
}

void FloatParamDef::InitAsDefaultInstance() {
}

FloatParamDef::FloatParamDef(const FloatParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.FloatParamDef)
}

void FloatParamDef::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatParamDef::~FloatParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.FloatParamDef)
  SharedDtor();
}

void FloatParamDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatParamDef_descriptor_;
}

const FloatParamDef& FloatParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2ftype_5fdef_2eproto();
  return *default_instance_;
}

FloatParamDef* FloatParamDef::default_instance_ = NULL;

FloatParamDef* FloatParamDef::New() const {
  return new FloatParamDef;
}

void FloatParamDef::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.FloatParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.FloatParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.FloatParamDef)
  return false;
#undef DO_
}

void FloatParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.FloatParamDef)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.FloatParamDef)
}

::google::protobuf::uint8* FloatParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.FloatParamDef)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.FloatParamDef)
  return target;
}

int FloatParamDef::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatParamDef::MergeFrom(const FloatParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatParamDef::CopyFrom(const FloatParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatParamDef::IsInitialized() const {

  return true;
}

void FloatParamDef::Swap(FloatParamDef* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatParamDef_descriptor_;
  metadata.reflection = FloatParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FixedParamDef::kBitWidthFieldNumber;
const int FixedParamDef::kNumFracFieldNumber;
const int FixedParamDef::kSignedFieldNumber;
#endif  // !_MSC_VER

FixedParamDef::FixedParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.FixedParamDef)
}

void FixedParamDef::InitAsDefaultInstance() {
}

FixedParamDef::FixedParamDef(const FixedParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.FixedParamDef)
}

void FixedParamDef::SharedCtor() {
  _cached_size_ = 0;
  bit_width_ = 0;
  num_frac_ = 0;
  signed__ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixedParamDef::~FixedParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.FixedParamDef)
  SharedDtor();
}

void FixedParamDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FixedParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedParamDef_descriptor_;
}

const FixedParamDef& FixedParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2ftype_5fdef_2eproto();
  return *default_instance_;
}

FixedParamDef* FixedParamDef::default_instance_ = NULL;

FixedParamDef* FixedParamDef::New() const {
  return new FixedParamDef;
}

void FixedParamDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FixedParamDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(bit_width_, num_frac_);
    signed__ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixedParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.FixedParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bit_width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bit_width_)));
          set_has_bit_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_frac;
        break;
      }

      // required int32 num_frac = 2;
      case 2: {
        if (tag == 16) {
         parse_num_frac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_frac_)));
          set_has_num_frac();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_signed;
        break;
      }

      // optional bool signed = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_signed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signed__)));
          set_has_signed_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.FixedParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.FixedParamDef)
  return false;
#undef DO_
}

void FixedParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.FixedParamDef)
  // required int32 bit_width = 1;
  if (has_bit_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bit_width(), output);
  }

  // required int32 num_frac = 2;
  if (has_num_frac()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_frac(), output);
  }

  // optional bool signed = 3 [default = true];
  if (has_signed_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->signed_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.FixedParamDef)
}

::google::protobuf::uint8* FixedParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.FixedParamDef)
  // required int32 bit_width = 1;
  if (has_bit_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bit_width(), target);
  }

  // required int32 num_frac = 2;
  if (has_num_frac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_frac(), target);
  }

  // optional bool signed = 3 [default = true];
  if (has_signed_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->signed_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.FixedParamDef)
  return target;
}

int FixedParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bit_width = 1;
    if (has_bit_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bit_width());
    }

    // required int32 num_frac = 2;
    if (has_num_frac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_frac());
    }

    // optional bool signed = 3 [default = true];
    if (has_signed_()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixedParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixedParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixedParamDef::MergeFrom(const FixedParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bit_width()) {
      set_bit_width(from.bit_width());
    }
    if (from.has_num_frac()) {
      set_num_frac(from.num_frac());
    }
    if (from.has_signed_()) {
      set_signed_(from.signed_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixedParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedParamDef::CopyFrom(const FixedParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedParamDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FixedParamDef::Swap(FixedParamDef* other) {
  if (other != this) {
    std::swap(bit_width_, other->bit_width_);
    std::swap(num_frac_, other->num_frac_);
    std::swap(signed__, other->signed__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixedParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedParamDef_descriptor_;
  metadata.reflection = FixedParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IntParamDef::IntParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.IntParamDef)
}

void IntParamDef::InitAsDefaultInstance() {
}

IntParamDef::IntParamDef(const IntParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.IntParamDef)
}

void IntParamDef::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntParamDef::~IntParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.IntParamDef)
  SharedDtor();
}

void IntParamDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntParamDef_descriptor_;
}

const IntParamDef& IntParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2ftype_5fdef_2eproto();
  return *default_instance_;
}

IntParamDef* IntParamDef::default_instance_ = NULL;

IntParamDef* IntParamDef::New() const {
  return new IntParamDef;
}

void IntParamDef::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.IntParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.IntParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.IntParamDef)
  return false;
#undef DO_
}

void IntParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.IntParamDef)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.IntParamDef)
}

::google::protobuf::uint8* IntParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.IntParamDef)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.IntParamDef)
  return target;
}

int IntParamDef::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntParamDef::MergeFrom(const IntParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntParamDef::CopyFrom(const IntParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntParamDef::IsInitialized() const {

  return true;
}

void IntParamDef::Swap(IntParamDef* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntParamDef_descriptor_;
  metadata.reflection = IntParamDef_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace plumber_ir

// @@protoc_insertion_point(global_scope)
