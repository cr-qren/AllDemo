// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plumber_ir/op_param_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plumber_ir/op_param_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace plumber_ir {

namespace {

const ::google::protobuf::Descriptor* Shape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shape_reflection_ = NULL;
const ::google::protobuf::Descriptor* Conv2DOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Conv2DOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaxPool2DOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxPool2DOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivationOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivationOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* Conv2DTransposeOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Conv2DTransposeOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftmaxOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftmaxOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchNormOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchNormOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* FullyConnectedOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullyConnectedOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropOutOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropOutOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlattenOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlattenOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReshapeOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReshapeOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArgMaxOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArgMaxOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* LrnOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LrnOpParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputOpParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputOpParamDef_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto() {
  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "plumber_ir/op_param_def.proto");
  GOOGLE_CHECK(file != NULL);
  Shape_descriptor_ = file->message_type(0);
  static const int Shape_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, dim_),
  };
  Shape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shape_descriptor_,
      Shape::default_instance_,
      Shape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shape));
  Conv2DOpParamDef_descriptor_ = file->message_type(1);
  static const int Conv2DOpParamDef_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DOpParamDef, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DOpParamDef, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DOpParamDef, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DOpParamDef, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DOpParamDef, activation_fn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DOpParamDef, use_maxpool_2x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DOpParamDef, use_batch_norm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DOpParamDef, use_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DOpParamDef, use_relu_),
  };
  Conv2DOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Conv2DOpParamDef_descriptor_,
      Conv2DOpParamDef::default_instance_,
      Conv2DOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Conv2DOpParamDef));
  MaxPool2DOpParamDef_descriptor_ = file->message_type(2);
  static const int MaxPool2DOpParamDef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxPool2DOpParamDef, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxPool2DOpParamDef, stride_),
  };
  MaxPool2DOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxPool2DOpParamDef_descriptor_,
      MaxPool2DOpParamDef::default_instance_,
      MaxPool2DOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxPool2DOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxPool2DOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxPool2DOpParamDef));
  ActivationOpParamDef_descriptor_ = file->message_type(3);
  static const int ActivationOpParamDef_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivationOpParamDef, type_),
  };
  ActivationOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivationOpParamDef_descriptor_,
      ActivationOpParamDef::default_instance_,
      ActivationOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivationOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivationOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivationOpParamDef));
  Conv2DTransposeOpParamDef_descriptor_ = file->message_type(4);
  static const int Conv2DTransposeOpParamDef_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DTransposeOpParamDef, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DTransposeOpParamDef, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DTransposeOpParamDef, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DTransposeOpParamDef, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DTransposeOpParamDef, activation_fn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DTransposeOpParamDef, use_relu_),
  };
  Conv2DTransposeOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Conv2DTransposeOpParamDef_descriptor_,
      Conv2DTransposeOpParamDef::default_instance_,
      Conv2DTransposeOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DTransposeOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2DTransposeOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Conv2DTransposeOpParamDef));
  SoftmaxOpParamDef_descriptor_ = file->message_type(5);
  static const int SoftmaxOpParamDef_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxOpParamDef, shape_),
  };
  SoftmaxOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoftmaxOpParamDef_descriptor_,
      SoftmaxOpParamDef::default_instance_,
      SoftmaxOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoftmaxOpParamDef));
  BatchNormOpParamDef_descriptor_ = file->message_type(6);
  static const int BatchNormOpParamDef_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormOpParamDef, activation_fn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormOpParamDef, use_maxpool_2x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormOpParamDef, use_relu_),
  };
  BatchNormOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchNormOpParamDef_descriptor_,
      BatchNormOpParamDef::default_instance_,
      BatchNormOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchNormOpParamDef));
  FullyConnectedOpParamDef_descriptor_ = file->message_type(7);
  static const int FullyConnectedOpParamDef_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnectedOpParamDef, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnectedOpParamDef, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnectedOpParamDef, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnectedOpParamDef, activation_fn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnectedOpParamDef, use_relu_),
  };
  FullyConnectedOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FullyConnectedOpParamDef_descriptor_,
      FullyConnectedOpParamDef::default_instance_,
      FullyConnectedOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnectedOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnectedOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FullyConnectedOpParamDef));
  DropOutOpParamDef_descriptor_ = file->message_type(8);
  static const int DropOutOpParamDef_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropOutOpParamDef, keep_prob_),
  };
  DropOutOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropOutOpParamDef_descriptor_,
      DropOutOpParamDef::default_instance_,
      DropOutOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropOutOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropOutOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropOutOpParamDef));
  FlattenOpParamDef_descriptor_ = file->message_type(9);
  static const int FlattenOpParamDef_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenOpParamDef, shape_),
  };
  FlattenOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlattenOpParamDef_descriptor_,
      FlattenOpParamDef::default_instance_,
      FlattenOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlattenOpParamDef));
  ReshapeOpParamDef_descriptor_ = file->message_type(10);
  static const int ReshapeOpParamDef_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeOpParamDef, shape_),
  };
  ReshapeOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReshapeOpParamDef_descriptor_,
      ReshapeOpParamDef::default_instance_,
      ReshapeOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReshapeOpParamDef));
  ArgMaxOpParamDef_descriptor_ = file->message_type(11);
  static const int ArgMaxOpParamDef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxOpParamDef, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxOpParamDef, axis_),
  };
  ArgMaxOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArgMaxOpParamDef_descriptor_,
      ArgMaxOpParamDef::default_instance_,
      ArgMaxOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArgMaxOpParamDef));
  LrnOpParamDef_descriptor_ = file->message_type(12);
  static const int LrnOpParamDef_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LrnOpParamDef, depth_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LrnOpParamDef, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LrnOpParamDef, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LrnOpParamDef, beta_),
  };
  LrnOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LrnOpParamDef_descriptor_,
      LrnOpParamDef::default_instance_,
      LrnOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LrnOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LrnOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LrnOpParamDef));
  InputOpParamDef_descriptor_ = file->message_type(13);
  static const int InputOpParamDef_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOpParamDef, shape_),
  };
  InputOpParamDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InputOpParamDef_descriptor_,
      InputOpParamDef::default_instance_,
      InputOpParamDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOpParamDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputOpParamDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InputOpParamDef));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shape_descriptor_, &Shape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Conv2DOpParamDef_descriptor_, &Conv2DOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxPool2DOpParamDef_descriptor_, &MaxPool2DOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivationOpParamDef_descriptor_, &ActivationOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Conv2DTransposeOpParamDef_descriptor_, &Conv2DTransposeOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoftmaxOpParamDef_descriptor_, &SoftmaxOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchNormOpParamDef_descriptor_, &BatchNormOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FullyConnectedOpParamDef_descriptor_, &FullyConnectedOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropOutOpParamDef_descriptor_, &DropOutOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlattenOpParamDef_descriptor_, &FlattenOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReshapeOpParamDef_descriptor_, &ReshapeOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArgMaxOpParamDef_descriptor_, &ArgMaxOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LrnOpParamDef_descriptor_, &LrnOpParamDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InputOpParamDef_descriptor_, &InputOpParamDef::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto() {
  delete Shape::default_instance_;
  delete Shape_reflection_;
  delete Conv2DOpParamDef::default_instance_;
  delete Conv2DOpParamDef_reflection_;
  delete MaxPool2DOpParamDef::default_instance_;
  delete MaxPool2DOpParamDef_reflection_;
  delete ActivationOpParamDef::default_instance_;
  delete ActivationOpParamDef_reflection_;
  delete Conv2DTransposeOpParamDef::default_instance_;
  delete Conv2DTransposeOpParamDef_reflection_;
  delete SoftmaxOpParamDef::default_instance_;
  delete SoftmaxOpParamDef_reflection_;
  delete BatchNormOpParamDef::default_instance_;
  delete BatchNormOpParamDef_reflection_;
  delete FullyConnectedOpParamDef::default_instance_;
  delete FullyConnectedOpParamDef_reflection_;
  delete DropOutOpParamDef::default_instance_;
  delete DropOutOpParamDef_reflection_;
  delete FlattenOpParamDef::default_instance_;
  delete FlattenOpParamDef_reflection_;
  delete ReshapeOpParamDef::default_instance_;
  delete ReshapeOpParamDef_reflection_;
  delete ArgMaxOpParamDef::default_instance_;
  delete ArgMaxOpParamDef_reflection_;
  delete LrnOpParamDef::default_instance_;
  delete LrnOpParamDef_reflection_;
  delete InputOpParamDef::default_instance_;
  delete InputOpParamDef_reflection_;
}

void protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035plumber_ir/op_param_def.proto\022\nplumber"
    "_ir\"\030\n\005Shape\022\017\n\003dim\030\001 \003(\005B\002\020\001\"\343\001\n\020Conv2D"
    "OpParamDef\022\r\n\005depth\030\002 \002(\005\022\023\n\013kernel_size"
    "\030\003 \002(\005\022\016\n\003pad\030\004 \001(\005:\0010\022\021\n\006stride\030\005 \001(\005:\001"
    "1\022\027\n\ractivation_fn\030d \001(\t:\000\022\036\n\017use_maxpoo"
    "l_2x2\030e \001(\010:\005false\022\035\n\016use_batch_norm\030f \001"
    "(\010:\005false\022\027\n\010use_bias\030g \001(\010:\005false\022\027\n\010us"
    "e_relu\030h \001(\010:\005false\":\n\023MaxPool2DOpParamD"
    "ef\022\023\n\013kernel_size\030\001 \002(\005\022\016\n\006stride\030\002 \002(\005\""
    "$\n\024ActivationOpParamDef\022\014\n\004type\030\001 \002(\t\"\224\001"
    "\n\031Conv2DTransposeOpParamDef\022\r\n\005depth\030\001 \002"
    "(\005\022\023\n\013kernel_size\030\002 \002(\005\022\016\n\003pad\030\003 \001(\005:\0010\022"
    "\021\n\006stride\030\004 \001(\005:\0011\022\027\n\ractivation_fn\030d \001("
    "\t:\000\022\027\n\010use_relu\030e \001(\010:\005false\"5\n\021SoftmaxO"
    "pParamDef\022 \n\005shape\030\001 \001(\0132\021.plumber_ir.Sh"
    "ape\"g\n\023BatchNormOpParamDef\022\027\n\ractivation"
    "_fn\030d \001(\t:\000\022\036\n\017use_maxpool_2x2\030e \001(\010:\005fa"
    "lse\022\027\n\010use_relu\030f \001(\010:\005false\"\177\n\030FullyCon"
    "nectedOpParamDef\022\014\n\004rows\030\001 \002(\005\022\017\n\007column"
    "s\030\002 \002(\005\022\022\n\nbatch_size\030\003 \002(\005\022\027\n\ractivatio"
    "n_fn\030d \001(\t:\000\022\027\n\010use_relu\030e \001(\010:\005false\"&\n"
    "\021DropOutOpParamDef\022\021\n\tkeep_prob\030\001 \002(\002\"5\n"
    "\021FlattenOpParamDef\022 \n\005shape\030\001 \001(\0132\021.plum"
    "ber_ir.Shape\"5\n\021ReshapeOpParamDef\022 \n\005sha"
    "pe\030\001 \001(\0132\021.plumber_ir.Shape\"E\n\020ArgMaxOpP"
    "aramDef\022 \n\005shape\030\001 \001(\0132\021.plumber_ir.Shap"
    "e\022\017\n\004axis\030\002 \002(\005:\0010\"^\n\rLrnOpParamDef\022\027\n\014d"
    "epth_radius\030\001 \002(\003:\0015\022\017\n\004bias\030\002 \002(\002:\0011\022\020\n"
    "\005alpha\030\003 \002(\002:\0011\022\021\n\004beta\030\004 \002(\002:\0030.5\"3\n\017In"
    "putOpParamDef\022 \n\005shape\030\001 \002(\0132\021.plumber_i"
    "r.Shape", 1207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plumber_ir/op_param_def.proto", &protobuf_RegisterTypes);
  Shape::default_instance_ = new Shape();
  Conv2DOpParamDef::default_instance_ = new Conv2DOpParamDef();
  MaxPool2DOpParamDef::default_instance_ = new MaxPool2DOpParamDef();
  ActivationOpParamDef::default_instance_ = new ActivationOpParamDef();
  Conv2DTransposeOpParamDef::default_instance_ = new Conv2DTransposeOpParamDef();
  SoftmaxOpParamDef::default_instance_ = new SoftmaxOpParamDef();
  BatchNormOpParamDef::default_instance_ = new BatchNormOpParamDef();
  FullyConnectedOpParamDef::default_instance_ = new FullyConnectedOpParamDef();
  DropOutOpParamDef::default_instance_ = new DropOutOpParamDef();
  FlattenOpParamDef::default_instance_ = new FlattenOpParamDef();
  ReshapeOpParamDef::default_instance_ = new ReshapeOpParamDef();
  ArgMaxOpParamDef::default_instance_ = new ArgMaxOpParamDef();
  LrnOpParamDef::default_instance_ = new LrnOpParamDef();
  InputOpParamDef::default_instance_ = new InputOpParamDef();
  Shape::default_instance_->InitAsDefaultInstance();
  Conv2DOpParamDef::default_instance_->InitAsDefaultInstance();
  MaxPool2DOpParamDef::default_instance_->InitAsDefaultInstance();
  ActivationOpParamDef::default_instance_->InitAsDefaultInstance();
  Conv2DTransposeOpParamDef::default_instance_->InitAsDefaultInstance();
  SoftmaxOpParamDef::default_instance_->InitAsDefaultInstance();
  BatchNormOpParamDef::default_instance_->InitAsDefaultInstance();
  FullyConnectedOpParamDef::default_instance_->InitAsDefaultInstance();
  DropOutOpParamDef::default_instance_->InitAsDefaultInstance();
  FlattenOpParamDef::default_instance_->InitAsDefaultInstance();
  ReshapeOpParamDef::default_instance_->InitAsDefaultInstance();
  ArgMaxOpParamDef::default_instance_->InitAsDefaultInstance();
  LrnOpParamDef::default_instance_->InitAsDefaultInstance();
  InputOpParamDef::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_plumber_5fir_2fop_5fparam_5fdef_2eproto {
  StaticDescriptorInitializer_plumber_5fir_2fop_5fparam_5fdef_2eproto() {
    protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  }
} static_descriptor_initializer_plumber_5fir_2fop_5fparam_5fdef_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Shape::kDimFieldNumber;
#endif  // !_MSC_VER

Shape::Shape()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.Shape)
}

void Shape::InitAsDefaultInstance() {
}

Shape::Shape(const Shape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.Shape)
}

void Shape::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shape::~Shape() {
  // @@protoc_insertion_point(destructor:plumber_ir.Shape)
  SharedDtor();
}

void Shape::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shape_descriptor_;
}

const Shape& Shape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

Shape* Shape::default_instance_ = NULL;

Shape* Shape::New() const {
  return new Shape;
}

void Shape::Clear() {
  dim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.Shape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 dim = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dim())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.Shape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.Shape)
  return false;
#undef DO_
}

void Shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.Shape)
  // repeated int32 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dim_cached_byte_size_);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dim(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.Shape)
}

::google::protobuf::uint8* Shape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.Shape)
  // repeated int32 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dim_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dim(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.Shape)
  return target;
}

int Shape::ByteSize() const {
  int total_size = 0;

  // repeated int32 dim = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->dim_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dim(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dim_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shape::MergeFrom(const Shape& from) {
  GOOGLE_CHECK_NE(&from, this);
  dim_.MergeFrom(from.dim_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shape::CopyFrom(const Shape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shape::IsInitialized() const {

  return true;
}

void Shape::Swap(Shape* other) {
  if (other != this) {
    dim_.Swap(&other->dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shape_descriptor_;
  metadata.reflection = Shape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Conv2DOpParamDef::kDepthFieldNumber;
const int Conv2DOpParamDef::kKernelSizeFieldNumber;
const int Conv2DOpParamDef::kPadFieldNumber;
const int Conv2DOpParamDef::kStrideFieldNumber;
const int Conv2DOpParamDef::kActivationFnFieldNumber;
const int Conv2DOpParamDef::kUseMaxpool2X2FieldNumber;
const int Conv2DOpParamDef::kUseBatchNormFieldNumber;
const int Conv2DOpParamDef::kUseBiasFieldNumber;
const int Conv2DOpParamDef::kUseReluFieldNumber;
#endif  // !_MSC_VER

Conv2DOpParamDef::Conv2DOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.Conv2DOpParamDef)
}

void Conv2DOpParamDef::InitAsDefaultInstance() {
}

Conv2DOpParamDef::Conv2DOpParamDef(const Conv2DOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.Conv2DOpParamDef)
}

void Conv2DOpParamDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  depth_ = 0;
  kernel_size_ = 0;
  pad_ = 0;
  stride_ = 1;
  activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_maxpool_2x2_ = false;
  use_batch_norm_ = false;
  use_bias_ = false;
  use_relu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Conv2DOpParamDef::~Conv2DOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.Conv2DOpParamDef)
  SharedDtor();
}

void Conv2DOpParamDef::SharedDtor() {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activation_fn_;
  }
  if (this != default_instance_) {
  }
}

void Conv2DOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Conv2DOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Conv2DOpParamDef_descriptor_;
}

const Conv2DOpParamDef& Conv2DOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

Conv2DOpParamDef* Conv2DOpParamDef::default_instance_ = NULL;

Conv2DOpParamDef* Conv2DOpParamDef::New() const {
  return new Conv2DOpParamDef;
}

void Conv2DOpParamDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Conv2DOpParamDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(depth_, pad_);
    ZR_(use_maxpool_2x2_, use_bias_);
    stride_ = 1;
    if (has_activation_fn()) {
      if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        activation_fn_->clear();
      }
    }
  }
  use_relu_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Conv2DOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.Conv2DOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 depth = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kernel_size;
        break;
      }

      // required int32 kernel_size = 3;
      case 3: {
        if (tag == 24) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pad;
        break;
      }

      // optional int32 pad = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stride;
        break;
      }

      // optional int32 stride = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_activation_fn;
        break;
      }

      // optional string activation_fn = 100 [default = ""];
      case 100: {
        if (tag == 802) {
         parse_activation_fn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_fn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->activation_fn().data(), this->activation_fn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "activation_fn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_use_maxpool_2x2;
        break;
      }

      // optional bool use_maxpool_2x2 = 101 [default = false];
      case 101: {
        if (tag == 808) {
         parse_use_maxpool_2x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_maxpool_2x2_)));
          set_has_use_maxpool_2x2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_use_batch_norm;
        break;
      }

      // optional bool use_batch_norm = 102 [default = false];
      case 102: {
        if (tag == 816) {
         parse_use_batch_norm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_batch_norm_)));
          set_has_use_batch_norm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(824)) goto parse_use_bias;
        break;
      }

      // optional bool use_bias = 103 [default = false];
      case 103: {
        if (tag == 824) {
         parse_use_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_bias_)));
          set_has_use_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(832)) goto parse_use_relu;
        break;
      }

      // optional bool use_relu = 104 [default = false];
      case 104: {
        if (tag == 832) {
         parse_use_relu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_relu_)));
          set_has_use_relu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.Conv2DOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.Conv2DOpParamDef)
  return false;
#undef DO_
}

void Conv2DOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.Conv2DOpParamDef)
  // required int32 depth = 2;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->depth(), output);
  }

  // required int32 kernel_size = 3;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kernel_size(), output);
  }

  // optional int32 pad = 4 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pad(), output);
  }

  // optional int32 stride = 5 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stride(), output);
  }

  // optional string activation_fn = 100 [default = ""];
  if (has_activation_fn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_fn().data(), this->activation_fn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "activation_fn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->activation_fn(), output);
  }

  // optional bool use_maxpool_2x2 = 101 [default = false];
  if (has_use_maxpool_2x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->use_maxpool_2x2(), output);
  }

  // optional bool use_batch_norm = 102 [default = false];
  if (has_use_batch_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->use_batch_norm(), output);
  }

  // optional bool use_bias = 103 [default = false];
  if (has_use_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(103, this->use_bias(), output);
  }

  // optional bool use_relu = 104 [default = false];
  if (has_use_relu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(104, this->use_relu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.Conv2DOpParamDef)
}

::google::protobuf::uint8* Conv2DOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.Conv2DOpParamDef)
  // required int32 depth = 2;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->depth(), target);
  }

  // required int32 kernel_size = 3;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kernel_size(), target);
  }

  // optional int32 pad = 4 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pad(), target);
  }

  // optional int32 stride = 5 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stride(), target);
  }

  // optional string activation_fn = 100 [default = ""];
  if (has_activation_fn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_fn().data(), this->activation_fn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "activation_fn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->activation_fn(), target);
  }

  // optional bool use_maxpool_2x2 = 101 [default = false];
  if (has_use_maxpool_2x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->use_maxpool_2x2(), target);
  }

  // optional bool use_batch_norm = 102 [default = false];
  if (has_use_batch_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->use_batch_norm(), target);
  }

  // optional bool use_bias = 103 [default = false];
  if (has_use_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(103, this->use_bias(), target);
  }

  // optional bool use_relu = 104 [default = false];
  if (has_use_relu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(104, this->use_relu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.Conv2DOpParamDef)
  return target;
}

int Conv2DOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 depth = 2;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // required int32 kernel_size = 3;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

    // optional int32 pad = 4 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad());
    }

    // optional int32 stride = 5 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional string activation_fn = 100 [default = ""];
    if (has_activation_fn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activation_fn());
    }

    // optional bool use_maxpool_2x2 = 101 [default = false];
    if (has_use_maxpool_2x2()) {
      total_size += 2 + 1;
    }

    // optional bool use_batch_norm = 102 [default = false];
    if (has_use_batch_norm()) {
      total_size += 2 + 1;
    }

    // optional bool use_bias = 103 [default = false];
    if (has_use_bias()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool use_relu = 104 [default = false];
    if (has_use_relu()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Conv2DOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Conv2DOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Conv2DOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Conv2DOpParamDef::MergeFrom(const Conv2DOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_activation_fn()) {
      set_activation_fn(from.activation_fn());
    }
    if (from.has_use_maxpool_2x2()) {
      set_use_maxpool_2x2(from.use_maxpool_2x2());
    }
    if (from.has_use_batch_norm()) {
      set_use_batch_norm(from.use_batch_norm());
    }
    if (from.has_use_bias()) {
      set_use_bias(from.use_bias());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_use_relu()) {
      set_use_relu(from.use_relu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Conv2DOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conv2DOpParamDef::CopyFrom(const Conv2DOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conv2DOpParamDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Conv2DOpParamDef::Swap(Conv2DOpParamDef* other) {
  if (other != this) {
    std::swap(depth_, other->depth_);
    std::swap(kernel_size_, other->kernel_size_);
    std::swap(pad_, other->pad_);
    std::swap(stride_, other->stride_);
    std::swap(activation_fn_, other->activation_fn_);
    std::swap(use_maxpool_2x2_, other->use_maxpool_2x2_);
    std::swap(use_batch_norm_, other->use_batch_norm_);
    std::swap(use_bias_, other->use_bias_);
    std::swap(use_relu_, other->use_relu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Conv2DOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Conv2DOpParamDef_descriptor_;
  metadata.reflection = Conv2DOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaxPool2DOpParamDef::kKernelSizeFieldNumber;
const int MaxPool2DOpParamDef::kStrideFieldNumber;
#endif  // !_MSC_VER

MaxPool2DOpParamDef::MaxPool2DOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.MaxPool2DOpParamDef)
}

void MaxPool2DOpParamDef::InitAsDefaultInstance() {
}

MaxPool2DOpParamDef::MaxPool2DOpParamDef(const MaxPool2DOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.MaxPool2DOpParamDef)
}

void MaxPool2DOpParamDef::SharedCtor() {
  _cached_size_ = 0;
  kernel_size_ = 0;
  stride_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxPool2DOpParamDef::~MaxPool2DOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.MaxPool2DOpParamDef)
  SharedDtor();
}

void MaxPool2DOpParamDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaxPool2DOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxPool2DOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxPool2DOpParamDef_descriptor_;
}

const MaxPool2DOpParamDef& MaxPool2DOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

MaxPool2DOpParamDef* MaxPool2DOpParamDef::default_instance_ = NULL;

MaxPool2DOpParamDef* MaxPool2DOpParamDef::New() const {
  return new MaxPool2DOpParamDef;
}

void MaxPool2DOpParamDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MaxPool2DOpParamDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(kernel_size_, stride_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxPool2DOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.MaxPool2DOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kernel_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stride;
        break;
      }

      // required int32 stride = 2;
      case 2: {
        if (tag == 16) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.MaxPool2DOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.MaxPool2DOpParamDef)
  return false;
#undef DO_
}

void MaxPool2DOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.MaxPool2DOpParamDef)
  // required int32 kernel_size = 1;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kernel_size(), output);
  }

  // required int32 stride = 2;
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stride(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.MaxPool2DOpParamDef)
}

::google::protobuf::uint8* MaxPool2DOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.MaxPool2DOpParamDef)
  // required int32 kernel_size = 1;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kernel_size(), target);
  }

  // required int32 stride = 2;
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stride(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.MaxPool2DOpParamDef)
  return target;
}

int MaxPool2DOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 kernel_size = 1;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

    // required int32 stride = 2;
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxPool2DOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxPool2DOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxPool2DOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxPool2DOpParamDef::MergeFrom(const MaxPool2DOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxPool2DOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxPool2DOpParamDef::CopyFrom(const MaxPool2DOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxPool2DOpParamDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MaxPool2DOpParamDef::Swap(MaxPool2DOpParamDef* other) {
  if (other != this) {
    std::swap(kernel_size_, other->kernel_size_);
    std::swap(stride_, other->stride_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxPool2DOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxPool2DOpParamDef_descriptor_;
  metadata.reflection = MaxPool2DOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivationOpParamDef::kTypeFieldNumber;
#endif  // !_MSC_VER

ActivationOpParamDef::ActivationOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.ActivationOpParamDef)
}

void ActivationOpParamDef::InitAsDefaultInstance() {
}

ActivationOpParamDef::ActivationOpParamDef(const ActivationOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.ActivationOpParamDef)
}

void ActivationOpParamDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivationOpParamDef::~ActivationOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.ActivationOpParamDef)
  SharedDtor();
}

void ActivationOpParamDef::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void ActivationOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivationOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivationOpParamDef_descriptor_;
}

const ActivationOpParamDef& ActivationOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

ActivationOpParamDef* ActivationOpParamDef::default_instance_ = NULL;

ActivationOpParamDef* ActivationOpParamDef::New() const {
  return new ActivationOpParamDef;
}

void ActivationOpParamDef::Clear() {
  if (has_type()) {
    if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      type_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivationOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.ActivationOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.ActivationOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.ActivationOpParamDef)
  return false;
#undef DO_
}

void ActivationOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.ActivationOpParamDef)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.ActivationOpParamDef)
}

::google::protobuf::uint8* ActivationOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.ActivationOpParamDef)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.ActivationOpParamDef)
  return target;
}

int ActivationOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivationOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivationOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivationOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivationOpParamDef::MergeFrom(const ActivationOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivationOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivationOpParamDef::CopyFrom(const ActivationOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivationOpParamDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActivationOpParamDef::Swap(ActivationOpParamDef* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivationOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivationOpParamDef_descriptor_;
  metadata.reflection = ActivationOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Conv2DTransposeOpParamDef::kDepthFieldNumber;
const int Conv2DTransposeOpParamDef::kKernelSizeFieldNumber;
const int Conv2DTransposeOpParamDef::kPadFieldNumber;
const int Conv2DTransposeOpParamDef::kStrideFieldNumber;
const int Conv2DTransposeOpParamDef::kActivationFnFieldNumber;
const int Conv2DTransposeOpParamDef::kUseReluFieldNumber;
#endif  // !_MSC_VER

Conv2DTransposeOpParamDef::Conv2DTransposeOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.Conv2DTransposeOpParamDef)
}

void Conv2DTransposeOpParamDef::InitAsDefaultInstance() {
}

Conv2DTransposeOpParamDef::Conv2DTransposeOpParamDef(const Conv2DTransposeOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.Conv2DTransposeOpParamDef)
}

void Conv2DTransposeOpParamDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  depth_ = 0;
  kernel_size_ = 0;
  pad_ = 0;
  stride_ = 1;
  activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_relu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Conv2DTransposeOpParamDef::~Conv2DTransposeOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.Conv2DTransposeOpParamDef)
  SharedDtor();
}

void Conv2DTransposeOpParamDef::SharedDtor() {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activation_fn_;
  }
  if (this != default_instance_) {
  }
}

void Conv2DTransposeOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Conv2DTransposeOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Conv2DTransposeOpParamDef_descriptor_;
}

const Conv2DTransposeOpParamDef& Conv2DTransposeOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

Conv2DTransposeOpParamDef* Conv2DTransposeOpParamDef::default_instance_ = NULL;

Conv2DTransposeOpParamDef* Conv2DTransposeOpParamDef::New() const {
  return new Conv2DTransposeOpParamDef;
}

void Conv2DTransposeOpParamDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Conv2DTransposeOpParamDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(depth_, pad_);
    stride_ = 1;
    if (has_activation_fn()) {
      if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        activation_fn_->clear();
      }
    }
    use_relu_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Conv2DTransposeOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.Conv2DTransposeOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 depth = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kernel_size;
        break;
      }

      // required int32 kernel_size = 2;
      case 2: {
        if (tag == 16) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad;
        break;
      }

      // optional int32 pad = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stride;
        break;
      }

      // optional int32 stride = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_activation_fn;
        break;
      }

      // optional string activation_fn = 100 [default = ""];
      case 100: {
        if (tag == 802) {
         parse_activation_fn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_fn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->activation_fn().data(), this->activation_fn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "activation_fn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_use_relu;
        break;
      }

      // optional bool use_relu = 101 [default = false];
      case 101: {
        if (tag == 808) {
         parse_use_relu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_relu_)));
          set_has_use_relu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.Conv2DTransposeOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.Conv2DTransposeOpParamDef)
  return false;
#undef DO_
}

void Conv2DTransposeOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.Conv2DTransposeOpParamDef)
  // required int32 depth = 1;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->depth(), output);
  }

  // required int32 kernel_size = 2;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kernel_size(), output);
  }

  // optional int32 pad = 3 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pad(), output);
  }

  // optional int32 stride = 4 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stride(), output);
  }

  // optional string activation_fn = 100 [default = ""];
  if (has_activation_fn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_fn().data(), this->activation_fn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "activation_fn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->activation_fn(), output);
  }

  // optional bool use_relu = 101 [default = false];
  if (has_use_relu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->use_relu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.Conv2DTransposeOpParamDef)
}

::google::protobuf::uint8* Conv2DTransposeOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.Conv2DTransposeOpParamDef)
  // required int32 depth = 1;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->depth(), target);
  }

  // required int32 kernel_size = 2;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kernel_size(), target);
  }

  // optional int32 pad = 3 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pad(), target);
  }

  // optional int32 stride = 4 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stride(), target);
  }

  // optional string activation_fn = 100 [default = ""];
  if (has_activation_fn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_fn().data(), this->activation_fn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "activation_fn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->activation_fn(), target);
  }

  // optional bool use_relu = 101 [default = false];
  if (has_use_relu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->use_relu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.Conv2DTransposeOpParamDef)
  return target;
}

int Conv2DTransposeOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 depth = 1;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // required int32 kernel_size = 2;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

    // optional int32 pad = 3 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad());
    }

    // optional int32 stride = 4 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional string activation_fn = 100 [default = ""];
    if (has_activation_fn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activation_fn());
    }

    // optional bool use_relu = 101 [default = false];
    if (has_use_relu()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Conv2DTransposeOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Conv2DTransposeOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Conv2DTransposeOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Conv2DTransposeOpParamDef::MergeFrom(const Conv2DTransposeOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_activation_fn()) {
      set_activation_fn(from.activation_fn());
    }
    if (from.has_use_relu()) {
      set_use_relu(from.use_relu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Conv2DTransposeOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conv2DTransposeOpParamDef::CopyFrom(const Conv2DTransposeOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conv2DTransposeOpParamDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Conv2DTransposeOpParamDef::Swap(Conv2DTransposeOpParamDef* other) {
  if (other != this) {
    std::swap(depth_, other->depth_);
    std::swap(kernel_size_, other->kernel_size_);
    std::swap(pad_, other->pad_);
    std::swap(stride_, other->stride_);
    std::swap(activation_fn_, other->activation_fn_);
    std::swap(use_relu_, other->use_relu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Conv2DTransposeOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Conv2DTransposeOpParamDef_descriptor_;
  metadata.reflection = Conv2DTransposeOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoftmaxOpParamDef::kShapeFieldNumber;
#endif  // !_MSC_VER

SoftmaxOpParamDef::SoftmaxOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.SoftmaxOpParamDef)
}

void SoftmaxOpParamDef::InitAsDefaultInstance() {
  shape_ = const_cast< ::plumber_ir::Shape*>(&::plumber_ir::Shape::default_instance());
}

SoftmaxOpParamDef::SoftmaxOpParamDef(const SoftmaxOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.SoftmaxOpParamDef)
}

void SoftmaxOpParamDef::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftmaxOpParamDef::~SoftmaxOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.SoftmaxOpParamDef)
  SharedDtor();
}

void SoftmaxOpParamDef::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void SoftmaxOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftmaxOpParamDef_descriptor_;
}

const SoftmaxOpParamDef& SoftmaxOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

SoftmaxOpParamDef* SoftmaxOpParamDef::default_instance_ = NULL;

SoftmaxOpParamDef* SoftmaxOpParamDef::New() const {
  return new SoftmaxOpParamDef;
}

void SoftmaxOpParamDef::Clear() {
  if (has_shape()) {
    if (shape_ != NULL) shape_->::plumber_ir::Shape::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoftmaxOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.SoftmaxOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .plumber_ir.Shape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.SoftmaxOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.SoftmaxOpParamDef)
  return false;
#undef DO_
}

void SoftmaxOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.SoftmaxOpParamDef)
  // optional .plumber_ir.Shape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.SoftmaxOpParamDef)
}

::google::protobuf::uint8* SoftmaxOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.SoftmaxOpParamDef)
  // optional .plumber_ir.Shape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shape(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.SoftmaxOpParamDef)
  return target;
}

int SoftmaxOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .plumber_ir.Shape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoftmaxOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoftmaxOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoftmaxOpParamDef::MergeFrom(const SoftmaxOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::plumber_ir::Shape::MergeFrom(from.shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoftmaxOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxOpParamDef::CopyFrom(const SoftmaxOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxOpParamDef::IsInitialized() const {

  return true;
}

void SoftmaxOpParamDef::Swap(SoftmaxOpParamDef* other) {
  if (other != this) {
    std::swap(shape_, other->shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoftmaxOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftmaxOpParamDef_descriptor_;
  metadata.reflection = SoftmaxOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchNormOpParamDef::kActivationFnFieldNumber;
const int BatchNormOpParamDef::kUseMaxpool2X2FieldNumber;
const int BatchNormOpParamDef::kUseReluFieldNumber;
#endif  // !_MSC_VER

BatchNormOpParamDef::BatchNormOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.BatchNormOpParamDef)
}

void BatchNormOpParamDef::InitAsDefaultInstance() {
}

BatchNormOpParamDef::BatchNormOpParamDef(const BatchNormOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.BatchNormOpParamDef)
}

void BatchNormOpParamDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_maxpool_2x2_ = false;
  use_relu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchNormOpParamDef::~BatchNormOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.BatchNormOpParamDef)
  SharedDtor();
}

void BatchNormOpParamDef::SharedDtor() {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activation_fn_;
  }
  if (this != default_instance_) {
  }
}

void BatchNormOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchNormOpParamDef_descriptor_;
}

const BatchNormOpParamDef& BatchNormOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

BatchNormOpParamDef* BatchNormOpParamDef::default_instance_ = NULL;

BatchNormOpParamDef* BatchNormOpParamDef::New() const {
  return new BatchNormOpParamDef;
}

void BatchNormOpParamDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BatchNormOpParamDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(use_maxpool_2x2_, use_relu_);
    if (has_activation_fn()) {
      if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        activation_fn_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchNormOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.BatchNormOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string activation_fn = 100 [default = ""];
      case 100: {
        if (tag == 802) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_fn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->activation_fn().data(), this->activation_fn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "activation_fn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_use_maxpool_2x2;
        break;
      }

      // optional bool use_maxpool_2x2 = 101 [default = false];
      case 101: {
        if (tag == 808) {
         parse_use_maxpool_2x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_maxpool_2x2_)));
          set_has_use_maxpool_2x2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_use_relu;
        break;
      }

      // optional bool use_relu = 102 [default = false];
      case 102: {
        if (tag == 816) {
         parse_use_relu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_relu_)));
          set_has_use_relu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.BatchNormOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.BatchNormOpParamDef)
  return false;
#undef DO_
}

void BatchNormOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.BatchNormOpParamDef)
  // optional string activation_fn = 100 [default = ""];
  if (has_activation_fn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_fn().data(), this->activation_fn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "activation_fn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->activation_fn(), output);
  }

  // optional bool use_maxpool_2x2 = 101 [default = false];
  if (has_use_maxpool_2x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->use_maxpool_2x2(), output);
  }

  // optional bool use_relu = 102 [default = false];
  if (has_use_relu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->use_relu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.BatchNormOpParamDef)
}

::google::protobuf::uint8* BatchNormOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.BatchNormOpParamDef)
  // optional string activation_fn = 100 [default = ""];
  if (has_activation_fn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_fn().data(), this->activation_fn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "activation_fn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->activation_fn(), target);
  }

  // optional bool use_maxpool_2x2 = 101 [default = false];
  if (has_use_maxpool_2x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->use_maxpool_2x2(), target);
  }

  // optional bool use_relu = 102 [default = false];
  if (has_use_relu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->use_relu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.BatchNormOpParamDef)
  return target;
}

int BatchNormOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string activation_fn = 100 [default = ""];
    if (has_activation_fn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activation_fn());
    }

    // optional bool use_maxpool_2x2 = 101 [default = false];
    if (has_use_maxpool_2x2()) {
      total_size += 2 + 1;
    }

    // optional bool use_relu = 102 [default = false];
    if (has_use_relu()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNormOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchNormOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchNormOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchNormOpParamDef::MergeFrom(const BatchNormOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activation_fn()) {
      set_activation_fn(from.activation_fn());
    }
    if (from.has_use_maxpool_2x2()) {
      set_use_maxpool_2x2(from.use_maxpool_2x2());
    }
    if (from.has_use_relu()) {
      set_use_relu(from.use_relu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchNormOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormOpParamDef::CopyFrom(const BatchNormOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormOpParamDef::IsInitialized() const {

  return true;
}

void BatchNormOpParamDef::Swap(BatchNormOpParamDef* other) {
  if (other != this) {
    std::swap(activation_fn_, other->activation_fn_);
    std::swap(use_maxpool_2x2_, other->use_maxpool_2x2_);
    std::swap(use_relu_, other->use_relu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchNormOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchNormOpParamDef_descriptor_;
  metadata.reflection = BatchNormOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FullyConnectedOpParamDef::kRowsFieldNumber;
const int FullyConnectedOpParamDef::kColumnsFieldNumber;
const int FullyConnectedOpParamDef::kBatchSizeFieldNumber;
const int FullyConnectedOpParamDef::kActivationFnFieldNumber;
const int FullyConnectedOpParamDef::kUseReluFieldNumber;
#endif  // !_MSC_VER

FullyConnectedOpParamDef::FullyConnectedOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.FullyConnectedOpParamDef)
}

void FullyConnectedOpParamDef::InitAsDefaultInstance() {
}

FullyConnectedOpParamDef::FullyConnectedOpParamDef(const FullyConnectedOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.FullyConnectedOpParamDef)
}

void FullyConnectedOpParamDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rows_ = 0;
  columns_ = 0;
  batch_size_ = 0;
  activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_relu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FullyConnectedOpParamDef::~FullyConnectedOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.FullyConnectedOpParamDef)
  SharedDtor();
}

void FullyConnectedOpParamDef::SharedDtor() {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activation_fn_;
  }
  if (this != default_instance_) {
  }
}

void FullyConnectedOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullyConnectedOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullyConnectedOpParamDef_descriptor_;
}

const FullyConnectedOpParamDef& FullyConnectedOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

FullyConnectedOpParamDef* FullyConnectedOpParamDef::default_instance_ = NULL;

FullyConnectedOpParamDef* FullyConnectedOpParamDef::New() const {
  return new FullyConnectedOpParamDef;
}

void FullyConnectedOpParamDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FullyConnectedOpParamDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(rows_, columns_);
    ZR_(batch_size_, use_relu_);
    if (has_activation_fn()) {
      if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        activation_fn_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FullyConnectedOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.FullyConnectedOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_columns;
        break;
      }

      // required int32 columns = 2;
      case 2: {
        if (tag == 16) {
         parse_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columns_)));
          set_has_columns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batch_size;
        break;
      }

      // required int32 batch_size = 3;
      case 3: {
        if (tag == 24) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_activation_fn;
        break;
      }

      // optional string activation_fn = 100 [default = ""];
      case 100: {
        if (tag == 802) {
         parse_activation_fn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_fn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->activation_fn().data(), this->activation_fn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "activation_fn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_use_relu;
        break;
      }

      // optional bool use_relu = 101 [default = false];
      case 101: {
        if (tag == 808) {
         parse_use_relu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_relu_)));
          set_has_use_relu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.FullyConnectedOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.FullyConnectedOpParamDef)
  return false;
#undef DO_
}

void FullyConnectedOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.FullyConnectedOpParamDef)
  // required int32 rows = 1;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // required int32 columns = 2;
  if (has_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->columns(), output);
  }

  // required int32 batch_size = 3;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->batch_size(), output);
  }

  // optional string activation_fn = 100 [default = ""];
  if (has_activation_fn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_fn().data(), this->activation_fn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "activation_fn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->activation_fn(), output);
  }

  // optional bool use_relu = 101 [default = false];
  if (has_use_relu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->use_relu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.FullyConnectedOpParamDef)
}

::google::protobuf::uint8* FullyConnectedOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.FullyConnectedOpParamDef)
  // required int32 rows = 1;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // required int32 columns = 2;
  if (has_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->columns(), target);
  }

  // required int32 batch_size = 3;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->batch_size(), target);
  }

  // optional string activation_fn = 100 [default = ""];
  if (has_activation_fn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_fn().data(), this->activation_fn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "activation_fn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->activation_fn(), target);
  }

  // optional bool use_relu = 101 [default = false];
  if (has_use_relu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->use_relu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.FullyConnectedOpParamDef)
  return target;
}

int FullyConnectedOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rows = 1;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rows());
    }

    // required int32 columns = 2;
    if (has_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->columns());
    }

    // required int32 batch_size = 3;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_size());
    }

    // optional string activation_fn = 100 [default = ""];
    if (has_activation_fn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activation_fn());
    }

    // optional bool use_relu = 101 [default = false];
    if (has_use_relu()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullyConnectedOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FullyConnectedOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FullyConnectedOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FullyConnectedOpParamDef::MergeFrom(const FullyConnectedOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_columns()) {
      set_columns(from.columns());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_activation_fn()) {
      set_activation_fn(from.activation_fn());
    }
    if (from.has_use_relu()) {
      set_use_relu(from.use_relu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FullyConnectedOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullyConnectedOpParamDef::CopyFrom(const FullyConnectedOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullyConnectedOpParamDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FullyConnectedOpParamDef::Swap(FullyConnectedOpParamDef* other) {
  if (other != this) {
    std::swap(rows_, other->rows_);
    std::swap(columns_, other->columns_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(activation_fn_, other->activation_fn_);
    std::swap(use_relu_, other->use_relu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FullyConnectedOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullyConnectedOpParamDef_descriptor_;
  metadata.reflection = FullyConnectedOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropOutOpParamDef::kKeepProbFieldNumber;
#endif  // !_MSC_VER

DropOutOpParamDef::DropOutOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.DropOutOpParamDef)
}

void DropOutOpParamDef::InitAsDefaultInstance() {
}

DropOutOpParamDef::DropOutOpParamDef(const DropOutOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.DropOutOpParamDef)
}

void DropOutOpParamDef::SharedCtor() {
  _cached_size_ = 0;
  keep_prob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropOutOpParamDef::~DropOutOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.DropOutOpParamDef)
  SharedDtor();
}

void DropOutOpParamDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropOutOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropOutOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropOutOpParamDef_descriptor_;
}

const DropOutOpParamDef& DropOutOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

DropOutOpParamDef* DropOutOpParamDef::default_instance_ = NULL;

DropOutOpParamDef* DropOutOpParamDef::New() const {
  return new DropOutOpParamDef;
}

void DropOutOpParamDef::Clear() {
  keep_prob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropOutOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.DropOutOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float keep_prob = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &keep_prob_)));
          set_has_keep_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.DropOutOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.DropOutOpParamDef)
  return false;
#undef DO_
}

void DropOutOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.DropOutOpParamDef)
  // required float keep_prob = 1;
  if (has_keep_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->keep_prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.DropOutOpParamDef)
}

::google::protobuf::uint8* DropOutOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.DropOutOpParamDef)
  // required float keep_prob = 1;
  if (has_keep_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->keep_prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.DropOutOpParamDef)
  return target;
}

int DropOutOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float keep_prob = 1;
    if (has_keep_prob()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropOutOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropOutOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropOutOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropOutOpParamDef::MergeFrom(const DropOutOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keep_prob()) {
      set_keep_prob(from.keep_prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropOutOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropOutOpParamDef::CopyFrom(const DropOutOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropOutOpParamDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DropOutOpParamDef::Swap(DropOutOpParamDef* other) {
  if (other != this) {
    std::swap(keep_prob_, other->keep_prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropOutOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropOutOpParamDef_descriptor_;
  metadata.reflection = DropOutOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlattenOpParamDef::kShapeFieldNumber;
#endif  // !_MSC_VER

FlattenOpParamDef::FlattenOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.FlattenOpParamDef)
}

void FlattenOpParamDef::InitAsDefaultInstance() {
  shape_ = const_cast< ::plumber_ir::Shape*>(&::plumber_ir::Shape::default_instance());
}

FlattenOpParamDef::FlattenOpParamDef(const FlattenOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.FlattenOpParamDef)
}

void FlattenOpParamDef::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlattenOpParamDef::~FlattenOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.FlattenOpParamDef)
  SharedDtor();
}

void FlattenOpParamDef::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void FlattenOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlattenOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlattenOpParamDef_descriptor_;
}

const FlattenOpParamDef& FlattenOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

FlattenOpParamDef* FlattenOpParamDef::default_instance_ = NULL;

FlattenOpParamDef* FlattenOpParamDef::New() const {
  return new FlattenOpParamDef;
}

void FlattenOpParamDef::Clear() {
  if (has_shape()) {
    if (shape_ != NULL) shape_->::plumber_ir::Shape::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlattenOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.FlattenOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .plumber_ir.Shape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.FlattenOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.FlattenOpParamDef)
  return false;
#undef DO_
}

void FlattenOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.FlattenOpParamDef)
  // optional .plumber_ir.Shape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.FlattenOpParamDef)
}

::google::protobuf::uint8* FlattenOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.FlattenOpParamDef)
  // optional .plumber_ir.Shape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shape(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.FlattenOpParamDef)
  return target;
}

int FlattenOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .plumber_ir.Shape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlattenOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlattenOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlattenOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlattenOpParamDef::MergeFrom(const FlattenOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::plumber_ir::Shape::MergeFrom(from.shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlattenOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlattenOpParamDef::CopyFrom(const FlattenOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenOpParamDef::IsInitialized() const {

  return true;
}

void FlattenOpParamDef::Swap(FlattenOpParamDef* other) {
  if (other != this) {
    std::swap(shape_, other->shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlattenOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlattenOpParamDef_descriptor_;
  metadata.reflection = FlattenOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReshapeOpParamDef::kShapeFieldNumber;
#endif  // !_MSC_VER

ReshapeOpParamDef::ReshapeOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.ReshapeOpParamDef)
}

void ReshapeOpParamDef::InitAsDefaultInstance() {
  shape_ = const_cast< ::plumber_ir::Shape*>(&::plumber_ir::Shape::default_instance());
}

ReshapeOpParamDef::ReshapeOpParamDef(const ReshapeOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.ReshapeOpParamDef)
}

void ReshapeOpParamDef::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReshapeOpParamDef::~ReshapeOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.ReshapeOpParamDef)
  SharedDtor();
}

void ReshapeOpParamDef::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void ReshapeOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReshapeOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReshapeOpParamDef_descriptor_;
}

const ReshapeOpParamDef& ReshapeOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

ReshapeOpParamDef* ReshapeOpParamDef::default_instance_ = NULL;

ReshapeOpParamDef* ReshapeOpParamDef::New() const {
  return new ReshapeOpParamDef;
}

void ReshapeOpParamDef::Clear() {
  if (has_shape()) {
    if (shape_ != NULL) shape_->::plumber_ir::Shape::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReshapeOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.ReshapeOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .plumber_ir.Shape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.ReshapeOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.ReshapeOpParamDef)
  return false;
#undef DO_
}

void ReshapeOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.ReshapeOpParamDef)
  // optional .plumber_ir.Shape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.ReshapeOpParamDef)
}

::google::protobuf::uint8* ReshapeOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.ReshapeOpParamDef)
  // optional .plumber_ir.Shape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shape(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.ReshapeOpParamDef)
  return target;
}

int ReshapeOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .plumber_ir.Shape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReshapeOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReshapeOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReshapeOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReshapeOpParamDef::MergeFrom(const ReshapeOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::plumber_ir::Shape::MergeFrom(from.shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReshapeOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReshapeOpParamDef::CopyFrom(const ReshapeOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReshapeOpParamDef::IsInitialized() const {

  return true;
}

void ReshapeOpParamDef::Swap(ReshapeOpParamDef* other) {
  if (other != this) {
    std::swap(shape_, other->shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReshapeOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReshapeOpParamDef_descriptor_;
  metadata.reflection = ReshapeOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArgMaxOpParamDef::kShapeFieldNumber;
const int ArgMaxOpParamDef::kAxisFieldNumber;
#endif  // !_MSC_VER

ArgMaxOpParamDef::ArgMaxOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.ArgMaxOpParamDef)
}

void ArgMaxOpParamDef::InitAsDefaultInstance() {
  shape_ = const_cast< ::plumber_ir::Shape*>(&::plumber_ir::Shape::default_instance());
}

ArgMaxOpParamDef::ArgMaxOpParamDef(const ArgMaxOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.ArgMaxOpParamDef)
}

void ArgMaxOpParamDef::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  axis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArgMaxOpParamDef::~ArgMaxOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.ArgMaxOpParamDef)
  SharedDtor();
}

void ArgMaxOpParamDef::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void ArgMaxOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArgMaxOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArgMaxOpParamDef_descriptor_;
}

const ArgMaxOpParamDef& ArgMaxOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

ArgMaxOpParamDef* ArgMaxOpParamDef::default_instance_ = NULL;

ArgMaxOpParamDef* ArgMaxOpParamDef::New() const {
  return new ArgMaxOpParamDef;
}

void ArgMaxOpParamDef::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_shape()) {
      if (shape_ != NULL) shape_->::plumber_ir::Shape::Clear();
    }
    axis_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArgMaxOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.ArgMaxOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .plumber_ir.Shape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // required int32 axis = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.ArgMaxOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.ArgMaxOpParamDef)
  return false;
#undef DO_
}

void ArgMaxOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.ArgMaxOpParamDef)
  // optional .plumber_ir.Shape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(), output);
  }

  // required int32 axis = 2 [default = 0];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.ArgMaxOpParamDef)
}

::google::protobuf::uint8* ArgMaxOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.ArgMaxOpParamDef)
  // optional .plumber_ir.Shape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shape(), target);
  }

  // required int32 axis = 2 [default = 0];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.ArgMaxOpParamDef)
  return target;
}

int ArgMaxOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .plumber_ir.Shape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

    // required int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArgMaxOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArgMaxOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArgMaxOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArgMaxOpParamDef::MergeFrom(const ArgMaxOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::plumber_ir::Shape::MergeFrom(from.shape());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArgMaxOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArgMaxOpParamDef::CopyFrom(const ArgMaxOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgMaxOpParamDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ArgMaxOpParamDef::Swap(ArgMaxOpParamDef* other) {
  if (other != this) {
    std::swap(shape_, other->shape_);
    std::swap(axis_, other->axis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArgMaxOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArgMaxOpParamDef_descriptor_;
  metadata.reflection = ArgMaxOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LrnOpParamDef::kDepthRadiusFieldNumber;
const int LrnOpParamDef::kBiasFieldNumber;
const int LrnOpParamDef::kAlphaFieldNumber;
const int LrnOpParamDef::kBetaFieldNumber;
#endif  // !_MSC_VER

LrnOpParamDef::LrnOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.LrnOpParamDef)
}

void LrnOpParamDef::InitAsDefaultInstance() {
}

LrnOpParamDef::LrnOpParamDef(const LrnOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.LrnOpParamDef)
}

void LrnOpParamDef::SharedCtor() {
  _cached_size_ = 0;
  depth_radius_ = GOOGLE_LONGLONG(5);
  bias_ = 1;
  alpha_ = 1;
  beta_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LrnOpParamDef::~LrnOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.LrnOpParamDef)
  SharedDtor();
}

void LrnOpParamDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LrnOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LrnOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LrnOpParamDef_descriptor_;
}

const LrnOpParamDef& LrnOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

LrnOpParamDef* LrnOpParamDef::default_instance_ = NULL;

LrnOpParamDef* LrnOpParamDef::New() const {
  return new LrnOpParamDef;
}

void LrnOpParamDef::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    depth_radius_ = GOOGLE_LONGLONG(5);
    bias_ = 1;
    alpha_ = 1;
    beta_ = 0.5f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LrnOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.LrnOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 depth_radius = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &depth_radius_)));
          set_has_depth_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_bias;
        break;
      }

      // required float bias = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
          set_has_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_alpha;
        break;
      }

      // required float alpha = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_beta;
        break;
      }

      // required float beta = 4 [default = 0.5];
      case 4: {
        if (tag == 37) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.LrnOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.LrnOpParamDef)
  return false;
#undef DO_
}

void LrnOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.LrnOpParamDef)
  // required int64 depth_radius = 1 [default = 5];
  if (has_depth_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->depth_radius(), output);
  }

  // required float bias = 2 [default = 1];
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bias(), output);
  }

  // required float alpha = 3 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alpha(), output);
  }

  // required float beta = 4 [default = 0.5];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->beta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.LrnOpParamDef)
}

::google::protobuf::uint8* LrnOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.LrnOpParamDef)
  // required int64 depth_radius = 1 [default = 5];
  if (has_depth_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->depth_radius(), target);
  }

  // required float bias = 2 [default = 1];
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bias(), target);
  }

  // required float alpha = 3 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alpha(), target);
  }

  // required float beta = 4 [default = 0.5];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->beta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.LrnOpParamDef)
  return target;
}

int LrnOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 depth_radius = 1 [default = 5];
    if (has_depth_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->depth_radius());
    }

    // required float bias = 2 [default = 1];
    if (has_bias()) {
      total_size += 1 + 4;
    }

    // required float alpha = 3 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // required float beta = 4 [default = 0.5];
    if (has_beta()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LrnOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LrnOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LrnOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LrnOpParamDef::MergeFrom(const LrnOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depth_radius()) {
      set_depth_radius(from.depth_radius());
    }
    if (from.has_bias()) {
      set_bias(from.bias());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LrnOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LrnOpParamDef::CopyFrom(const LrnOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LrnOpParamDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LrnOpParamDef::Swap(LrnOpParamDef* other) {
  if (other != this) {
    std::swap(depth_radius_, other->depth_radius_);
    std::swap(bias_, other->bias_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LrnOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LrnOpParamDef_descriptor_;
  metadata.reflection = LrnOpParamDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InputOpParamDef::kShapeFieldNumber;
#endif  // !_MSC_VER

InputOpParamDef::InputOpParamDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.InputOpParamDef)
}

void InputOpParamDef::InitAsDefaultInstance() {
  shape_ = const_cast< ::plumber_ir::Shape*>(&::plumber_ir::Shape::default_instance());
}

InputOpParamDef::InputOpParamDef(const InputOpParamDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.InputOpParamDef)
}

void InputOpParamDef::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputOpParamDef::~InputOpParamDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.InputOpParamDef)
  SharedDtor();
}

void InputOpParamDef::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void InputOpParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputOpParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputOpParamDef_descriptor_;
}

const InputOpParamDef& InputOpParamDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  return *default_instance_;
}

InputOpParamDef* InputOpParamDef::default_instance_ = NULL;

InputOpParamDef* InputOpParamDef::New() const {
  return new InputOpParamDef;
}

void InputOpParamDef::Clear() {
  if (has_shape()) {
    if (shape_ != NULL) shape_->::plumber_ir::Shape::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InputOpParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.InputOpParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .plumber_ir.Shape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.InputOpParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.InputOpParamDef)
  return false;
#undef DO_
}

void InputOpParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.InputOpParamDef)
  // required .plumber_ir.Shape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.InputOpParamDef)
}

::google::protobuf::uint8* InputOpParamDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.InputOpParamDef)
  // required .plumber_ir.Shape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shape(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.InputOpParamDef)
  return target;
}

int InputOpParamDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .plumber_ir.Shape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputOpParamDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InputOpParamDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InputOpParamDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InputOpParamDef::MergeFrom(const InputOpParamDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::plumber_ir::Shape::MergeFrom(from.shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InputOpParamDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputOpParamDef::CopyFrom(const InputOpParamDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputOpParamDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InputOpParamDef::Swap(InputOpParamDef* other) {
  if (other != this) {
    std::swap(shape_, other->shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InputOpParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputOpParamDef_descriptor_;
  metadata.reflection = InputOpParamDef_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace plumber_ir

// @@protoc_insertion_point(global_scope)
