// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plumber_ir/dfg_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plumber_ir/dfg_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace plumber_ir {

namespace {

const ::google::protobuf::Descriptor* DFGNodeDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DFGNodeDef_reflection_ = NULL;
struct DFGNodeDefOneofInstance {
  const ::plumber_ir::InputOpParamDef* input_op_param_;
  const ::plumber_ir::Conv2DOpParamDef* conv2d_op_param_;
  const ::plumber_ir::MaxPool2DOpParamDef* max_pool2d_op_param_;
  const ::plumber_ir::Conv2DTransposeOpParamDef* conv2d_op_transpose_param_;
  const ::plumber_ir::SoftmaxOpParamDef* softmax_op_param_;
  const ::plumber_ir::BatchNormOpParamDef* batchnorm_op_param_;
  const ::plumber_ir::FullyConnectedOpParamDef* fullyconnected_op_param_;
  const ::plumber_ir::DropOutOpParamDef* dropout_op_param_;
  const ::plumber_ir::FlattenOpParamDef* flatten_op_param_;
  const ::plumber_ir::ReshapeOpParamDef* reshape_op_param_;
  const ::plumber_ir::ArgMaxOpParamDef* argmax_op_param_;
  const ::plumber_ir::LrnOpParamDef* lrn_op_param_;
  const ::plumber_ir::FloatParamDef* float_param_;
  const ::plumber_ir::FixedParamDef* fixed_param_;
  const ::plumber_ir::IntParamDef* int_param_;
}* DFGNodeDef_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* DFGNodeDef_Device_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DFGDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DFGDef_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_plumber_5fir_2fdfg_5fdef_2eproto() {
  protobuf_AddDesc_plumber_5fir_2fdfg_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "plumber_ir/dfg_def.proto");
  GOOGLE_CHECK(file != NULL);
  DFGNodeDef_descriptor_ = file->message_type(0);
  static const int DFGNodeDef_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGNodeDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGNodeDef, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGNodeDef, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGNodeDef, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGNodeDef, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGNodeDef, input_shape_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, input_op_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, conv2d_op_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, max_pool2d_op_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, conv2d_op_transpose_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, softmax_op_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, batchnorm_op_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, fullyconnected_op_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, dropout_op_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, flatten_op_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, reshape_op_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, argmax_op_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, lrn_op_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, float_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, fixed_param_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DFGNodeDef_default_oneof_instance_, int_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGNodeDef, op_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGNodeDef, type_param_),
  };
  DFGNodeDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DFGNodeDef_descriptor_,
      DFGNodeDef::default_instance_,
      DFGNodeDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGNodeDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGNodeDef, _unknown_fields_),
      -1,
      DFGNodeDef_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGNodeDef, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DFGNodeDef));
  DFGNodeDef_Device_descriptor_ = DFGNodeDef_descriptor_->enum_type(0);
  DFGDef_descriptor_ = file->message_type(1);
  static const int DFGDef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGDef, node_),
  };
  DFGDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DFGDef_descriptor_,
      DFGDef::default_instance_,
      DFGDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFGDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DFGDef));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_plumber_5fir_2fdfg_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DFGNodeDef_descriptor_, &DFGNodeDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DFGDef_descriptor_, &DFGDef::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_plumber_5fir_2fdfg_5fdef_2eproto() {
  delete DFGNodeDef::default_instance_;
  delete DFGNodeDef_default_oneof_instance_;
  delete DFGNodeDef_reflection_;
  delete DFGDef::default_instance_;
  delete DFGDef_reflection_;
}

void protobuf_AddDesc_plumber_5fir_2fdfg_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::plumber_ir::protobuf_AddDesc_plumber_5fir_2ftype_5fdef_2eproto();
  ::plumber_ir::protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030plumber_ir/dfg_def.proto\022\nplumber_ir\032\031"
    "plumber_ir/type_def.proto\032\035plumber_ir/op"
    "_param_def.proto\"\346\010\n\nDFGNodeDef\022\014\n\004name\030"
    "\001 \002(\t\022\r\n\005input\030\002 \003(\t\022\n\n\002op\030\003 \002(\t\0222\n\006devi"
    "ce\030\004 \001(\0162\035.plumber_ir.DFGNodeDef.Device:"
    "\003CPU\022+\n\004type\030\005 \001(\0162\024.plumber_ir.DataType"
    ":\007T_FLOAT\022&\n\013input_shape\030\006 \003(\0132\021.plumber"
    "_ir.Shape\0225\n\016input_op_param\030d \001(\0132\033.plum"
    "ber_ir.InputOpParamDefH\000\0227\n\017conv2d_op_pa"
    "ram\030e \001(\0132\034.plumber_ir.Conv2DOpParamDefH"
    "\000\022>\n\023max_pool2d_op_param\030f \001(\0132\037.plumber"
    "_ir.MaxPool2DOpParamDefH\000\022J\n\031conv2d_op_t"
    "ranspose_param\030g \001(\0132%.plumber_ir.Conv2D"
    "TransposeOpParamDefH\000\0229\n\020softmax_op_para"
    "m\030h \001(\0132\035.plumber_ir.SoftmaxOpParamDefH\000"
    "\022=\n\022batchnorm_op_param\030i \001(\0132\037.plumber_i"
    "r.BatchNormOpParamDefH\000\022G\n\027fullyconnecte"
    "d_op_param\030j \001(\0132$.plumber_ir.FullyConne"
    "ctedOpParamDefH\000\0229\n\020dropout_op_param\030k \001"
    "(\0132\035.plumber_ir.DropOutOpParamDefH\000\0229\n\020f"
    "latten_op_param\030l \001(\0132\035.plumber_ir.Flatt"
    "enOpParamDefH\000\0229\n\020reshape_op_param\030m \001(\013"
    "2\035.plumber_ir.ReshapeOpParamDefH\000\0227\n\017arg"
    "max_op_param\030n \001(\0132\034.plumber_ir.ArgMaxOp"
    "ParamDefH\000\0221\n\014lrn_op_param\030o \001(\0132\031.plumb"
    "er_ir.LrnOpParamDefH\000\0221\n\013float_param\030\310\001 "
    "\001(\0132\031.plumber_ir.FloatParamDefH\001\0221\n\013fixe"
    "d_param\030\311\001 \001(\0132\031.plumber_ir.FixedParamDe"
    "fH\001\022-\n\tint_param\030\312\001 \001(\0132\027.plumber_ir.Int"
    "ParamDefH\001\"\033\n\006Device\022\007\n\003CPU\020\000\022\010\n\004FPGA\020\001B"
    "\n\n\010op_paramB\014\n\ntype_param\"<\n\006DFGDef\022\014\n\004n"
    "ame\030\001 \002(\t\022$\n\004node\030\002 \003(\0132\026.plumber_ir.DFG"
    "NodeDef", 1287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plumber_ir/dfg_def.proto", &protobuf_RegisterTypes);
  DFGNodeDef::default_instance_ = new DFGNodeDef();
  DFGNodeDef_default_oneof_instance_ = new DFGNodeDefOneofInstance;
  DFGDef::default_instance_ = new DFGDef();
  DFGNodeDef::default_instance_->InitAsDefaultInstance();
  DFGDef::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_plumber_5fir_2fdfg_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_plumber_5fir_2fdfg_5fdef_2eproto {
  StaticDescriptorInitializer_plumber_5fir_2fdfg_5fdef_2eproto() {
    protobuf_AddDesc_plumber_5fir_2fdfg_5fdef_2eproto();
  }
} static_descriptor_initializer_plumber_5fir_2fdfg_5fdef_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DFGNodeDef_Device_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DFGNodeDef_Device_descriptor_;
}
bool DFGNodeDef_Device_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DFGNodeDef_Device DFGNodeDef::CPU;
const DFGNodeDef_Device DFGNodeDef::FPGA;
const DFGNodeDef_Device DFGNodeDef::Device_MIN;
const DFGNodeDef_Device DFGNodeDef::Device_MAX;
const int DFGNodeDef::Device_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DFGNodeDef::kNameFieldNumber;
const int DFGNodeDef::kInputFieldNumber;
const int DFGNodeDef::kOpFieldNumber;
const int DFGNodeDef::kDeviceFieldNumber;
const int DFGNodeDef::kTypeFieldNumber;
const int DFGNodeDef::kInputShapeFieldNumber;
const int DFGNodeDef::kInputOpParamFieldNumber;
const int DFGNodeDef::kConv2DOpParamFieldNumber;
const int DFGNodeDef::kMaxPool2DOpParamFieldNumber;
const int DFGNodeDef::kConv2DOpTransposeParamFieldNumber;
const int DFGNodeDef::kSoftmaxOpParamFieldNumber;
const int DFGNodeDef::kBatchnormOpParamFieldNumber;
const int DFGNodeDef::kFullyconnectedOpParamFieldNumber;
const int DFGNodeDef::kDropoutOpParamFieldNumber;
const int DFGNodeDef::kFlattenOpParamFieldNumber;
const int DFGNodeDef::kReshapeOpParamFieldNumber;
const int DFGNodeDef::kArgmaxOpParamFieldNumber;
const int DFGNodeDef::kLrnOpParamFieldNumber;
const int DFGNodeDef::kFloatParamFieldNumber;
const int DFGNodeDef::kFixedParamFieldNumber;
const int DFGNodeDef::kIntParamFieldNumber;
#endif  // !_MSC_VER

DFGNodeDef::DFGNodeDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.DFGNodeDef)
}

void DFGNodeDef::InitAsDefaultInstance() {
  DFGNodeDef_default_oneof_instance_->input_op_param_ = const_cast< ::plumber_ir::InputOpParamDef*>(&::plumber_ir::InputOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->conv2d_op_param_ = const_cast< ::plumber_ir::Conv2DOpParamDef*>(&::plumber_ir::Conv2DOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->max_pool2d_op_param_ = const_cast< ::plumber_ir::MaxPool2DOpParamDef*>(&::plumber_ir::MaxPool2DOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->conv2d_op_transpose_param_ = const_cast< ::plumber_ir::Conv2DTransposeOpParamDef*>(&::plumber_ir::Conv2DTransposeOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->softmax_op_param_ = const_cast< ::plumber_ir::SoftmaxOpParamDef*>(&::plumber_ir::SoftmaxOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->batchnorm_op_param_ = const_cast< ::plumber_ir::BatchNormOpParamDef*>(&::plumber_ir::BatchNormOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->fullyconnected_op_param_ = const_cast< ::plumber_ir::FullyConnectedOpParamDef*>(&::plumber_ir::FullyConnectedOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->dropout_op_param_ = const_cast< ::plumber_ir::DropOutOpParamDef*>(&::plumber_ir::DropOutOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->flatten_op_param_ = const_cast< ::plumber_ir::FlattenOpParamDef*>(&::plumber_ir::FlattenOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->reshape_op_param_ = const_cast< ::plumber_ir::ReshapeOpParamDef*>(&::plumber_ir::ReshapeOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->argmax_op_param_ = const_cast< ::plumber_ir::ArgMaxOpParamDef*>(&::plumber_ir::ArgMaxOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->lrn_op_param_ = const_cast< ::plumber_ir::LrnOpParamDef*>(&::plumber_ir::LrnOpParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->float_param_ = const_cast< ::plumber_ir::FloatParamDef*>(&::plumber_ir::FloatParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->fixed_param_ = const_cast< ::plumber_ir::FixedParamDef*>(&::plumber_ir::FixedParamDef::default_instance());
  DFGNodeDef_default_oneof_instance_->int_param_ = const_cast< ::plumber_ir::IntParamDef*>(&::plumber_ir::IntParamDef::default_instance());
}

DFGNodeDef::DFGNodeDef(const DFGNodeDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.DFGNodeDef)
}

void DFGNodeDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = 0;
  type_ = 6;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_op_param();
  clear_has_type_param();
}

DFGNodeDef::~DFGNodeDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.DFGNodeDef)
  SharedDtor();
}

void DFGNodeDef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete op_;
  }
  if (has_op_param()) {
    clear_op_param();
  }
  if (has_type_param()) {
    clear_type_param();
  }
  if (this != default_instance_) {
  }
}

void DFGNodeDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DFGNodeDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DFGNodeDef_descriptor_;
}

const DFGNodeDef& DFGNodeDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fdfg_5fdef_2eproto();
  return *default_instance_;
}

DFGNodeDef* DFGNodeDef::default_instance_ = NULL;

DFGNodeDef* DFGNodeDef::New() const {
  return new DFGNodeDef;
}

void DFGNodeDef::clear_op_param() {
  switch(op_param_case()) {
    case kInputOpParam: {
      delete op_param_.input_op_param_;
      break;
    }
    case kConv2DOpParam: {
      delete op_param_.conv2d_op_param_;
      break;
    }
    case kMaxPool2DOpParam: {
      delete op_param_.max_pool2d_op_param_;
      break;
    }
    case kConv2DOpTransposeParam: {
      delete op_param_.conv2d_op_transpose_param_;
      break;
    }
    case kSoftmaxOpParam: {
      delete op_param_.softmax_op_param_;
      break;
    }
    case kBatchnormOpParam: {
      delete op_param_.batchnorm_op_param_;
      break;
    }
    case kFullyconnectedOpParam: {
      delete op_param_.fullyconnected_op_param_;
      break;
    }
    case kDropoutOpParam: {
      delete op_param_.dropout_op_param_;
      break;
    }
    case kFlattenOpParam: {
      delete op_param_.flatten_op_param_;
      break;
    }
    case kReshapeOpParam: {
      delete op_param_.reshape_op_param_;
      break;
    }
    case kArgmaxOpParam: {
      delete op_param_.argmax_op_param_;
      break;
    }
    case kLrnOpParam: {
      delete op_param_.lrn_op_param_;
      break;
    }
    case OP_PARAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_PARAM_NOT_SET;
}

void DFGNodeDef::clear_type_param() {
  switch(type_param_case()) {
    case kFloatParam: {
      delete type_param_.float_param_;
      break;
    }
    case kFixedParam: {
      delete type_param_.fixed_param_;
      break;
    }
    case kIntParam: {
      delete type_param_.int_param_;
      break;
    }
    case TYPE_PARAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TYPE_PARAM_NOT_SET;
}


void DFGNodeDef::Clear() {
  if (_has_bits_[0 / 32] & 29) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_op()) {
      if (op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        op_->clear();
      }
    }
    device_ = 0;
    type_ = 6;
  }
  input_.Clear();
  input_shape_.Clear();
  clear_op_param();
  clear_type_param();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DFGNodeDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.DFGNodeDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_input;
        break;
      }

      // repeated string input = 2;
      case 2: {
        if (tag == 18) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_input;
        if (input->ExpectTag(26)) goto parse_op;
        break;
      }

      // required string op = 3;
      case 3: {
        if (tag == 26) {
         parse_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->op().data(), this->op().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "op");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_device;
        break;
      }

      // optional .plumber_ir.DFGNodeDef.Device device = 4 [default = CPU];
      case 4: {
        if (tag == 32) {
         parse_device:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::plumber_ir::DFGNodeDef_Device_IsValid(value)) {
            set_device(static_cast< ::plumber_ir::DFGNodeDef_Device >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .plumber_ir.DataType type = 5 [default = T_FLOAT];
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::plumber_ir::DataType_IsValid(value)) {
            set_type(static_cast< ::plumber_ir::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_input_shape;
        break;
      }

      // repeated .plumber_ir.Shape input_shape = 6;
      case 6: {
        if (tag == 50) {
         parse_input_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_input_shape;
        if (input->ExpectTag(802)) goto parse_input_op_param;
        break;
      }

      // optional .plumber_ir.InputOpParamDef input_op_param = 100;
      case 100: {
        if (tag == 802) {
         parse_input_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_op_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_conv2d_op_param;
        break;
      }

      // optional .plumber_ir.Conv2DOpParamDef conv2d_op_param = 101;
      case 101: {
        if (tag == 810) {
         parse_conv2d_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv2d_op_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_max_pool2d_op_param;
        break;
      }

      // optional .plumber_ir.MaxPool2DOpParamDef max_pool2d_op_param = 102;
      case 102: {
        if (tag == 818) {
         parse_max_pool2d_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_pool2d_op_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_conv2d_op_transpose_param;
        break;
      }

      // optional .plumber_ir.Conv2DTransposeOpParamDef conv2d_op_transpose_param = 103;
      case 103: {
        if (tag == 826) {
         parse_conv2d_op_transpose_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv2d_op_transpose_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_softmax_op_param;
        break;
      }

      // optional .plumber_ir.SoftmaxOpParamDef softmax_op_param = 104;
      case 104: {
        if (tag == 834) {
         parse_softmax_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_op_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_batchnorm_op_param;
        break;
      }

      // optional .plumber_ir.BatchNormOpParamDef batchnorm_op_param = 105;
      case 105: {
        if (tag == 842) {
         parse_batchnorm_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batchnorm_op_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(850)) goto parse_fullyconnected_op_param;
        break;
      }

      // optional .plumber_ir.FullyConnectedOpParamDef fullyconnected_op_param = 106;
      case 106: {
        if (tag == 850) {
         parse_fullyconnected_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fullyconnected_op_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_dropout_op_param;
        break;
      }

      // optional .plumber_ir.DropOutOpParamDef dropout_op_param = 107;
      case 107: {
        if (tag == 858) {
         parse_dropout_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_op_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(866)) goto parse_flatten_op_param;
        break;
      }

      // optional .plumber_ir.FlattenOpParamDef flatten_op_param = 108;
      case 108: {
        if (tag == 866) {
         parse_flatten_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flatten_op_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(874)) goto parse_reshape_op_param;
        break;
      }

      // optional .plumber_ir.ReshapeOpParamDef reshape_op_param = 109;
      case 109: {
        if (tag == 874) {
         parse_reshape_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshape_op_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(882)) goto parse_argmax_op_param;
        break;
      }

      // optional .plumber_ir.ArgMaxOpParamDef argmax_op_param = 110;
      case 110: {
        if (tag == 882) {
         parse_argmax_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_op_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(890)) goto parse_lrn_op_param;
        break;
      }

      // optional .plumber_ir.LrnOpParamDef lrn_op_param = 111;
      case 111: {
        if (tag == 890) {
         parse_lrn_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_op_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_float_param;
        break;
      }

      // optional .plumber_ir.FloatParamDef float_param = 200;
      case 200: {
        if (tag == 1602) {
         parse_float_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_fixed_param;
        break;
      }

      // optional .plumber_ir.FixedParamDef fixed_param = 201;
      case 201: {
        if (tag == 1610) {
         parse_fixed_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_int_param;
        break;
      }

      // optional .plumber_ir.IntParamDef int_param = 202;
      case 202: {
        if (tag == 1618) {
         parse_int_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.DFGNodeDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.DFGNodeDef)
  return false;
#undef DO_
}

void DFGNodeDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.DFGNodeDef)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string input = 2;
  for (int i = 0; i < this->input_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->input(i).data(), this->input(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->input(i), output);
  }

  // required string op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "op");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->op(), output);
  }

  // optional .plumber_ir.DFGNodeDef.Device device = 4 [default = CPU];
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->device(), output);
  }

  // optional .plumber_ir.DataType type = 5 [default = T_FLOAT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .plumber_ir.Shape input_shape = 6;
  for (int i = 0; i < this->input_shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->input_shape(i), output);
  }

  // optional .plumber_ir.InputOpParamDef input_op_param = 100;
  if (has_input_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->input_op_param(), output);
  }

  // optional .plumber_ir.Conv2DOpParamDef conv2d_op_param = 101;
  if (has_conv2d_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->conv2d_op_param(), output);
  }

  // optional .plumber_ir.MaxPool2DOpParamDef max_pool2d_op_param = 102;
  if (has_max_pool2d_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->max_pool2d_op_param(), output);
  }

  // optional .plumber_ir.Conv2DTransposeOpParamDef conv2d_op_transpose_param = 103;
  if (has_conv2d_op_transpose_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->conv2d_op_transpose_param(), output);
  }

  // optional .plumber_ir.SoftmaxOpParamDef softmax_op_param = 104;
  if (has_softmax_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->softmax_op_param(), output);
  }

  // optional .plumber_ir.BatchNormOpParamDef batchnorm_op_param = 105;
  if (has_batchnorm_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->batchnorm_op_param(), output);
  }

  // optional .plumber_ir.FullyConnectedOpParamDef fullyconnected_op_param = 106;
  if (has_fullyconnected_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->fullyconnected_op_param(), output);
  }

  // optional .plumber_ir.DropOutOpParamDef dropout_op_param = 107;
  if (has_dropout_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->dropout_op_param(), output);
  }

  // optional .plumber_ir.FlattenOpParamDef flatten_op_param = 108;
  if (has_flatten_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->flatten_op_param(), output);
  }

  // optional .plumber_ir.ReshapeOpParamDef reshape_op_param = 109;
  if (has_reshape_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, this->reshape_op_param(), output);
  }

  // optional .plumber_ir.ArgMaxOpParamDef argmax_op_param = 110;
  if (has_argmax_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, this->argmax_op_param(), output);
  }

  // optional .plumber_ir.LrnOpParamDef lrn_op_param = 111;
  if (has_lrn_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->lrn_op_param(), output);
  }

  // optional .plumber_ir.FloatParamDef float_param = 200;
  if (has_float_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->float_param(), output);
  }

  // optional .plumber_ir.FixedParamDef fixed_param = 201;
  if (has_fixed_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, this->fixed_param(), output);
  }

  // optional .plumber_ir.IntParamDef int_param = 202;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      202, this->int_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.DFGNodeDef)
}

::google::protobuf::uint8* DFGNodeDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.DFGNodeDef)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string input = 2;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->input(i), target);
  }

  // required string op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "op");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->op(), target);
  }

  // optional .plumber_ir.DFGNodeDef.Device device = 4 [default = CPU];
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->device(), target);
  }

  // optional .plumber_ir.DataType type = 5 [default = T_FLOAT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .plumber_ir.Shape input_shape = 6;
  for (int i = 0; i < this->input_shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->input_shape(i), target);
  }

  // optional .plumber_ir.InputOpParamDef input_op_param = 100;
  if (has_input_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->input_op_param(), target);
  }

  // optional .plumber_ir.Conv2DOpParamDef conv2d_op_param = 101;
  if (has_conv2d_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->conv2d_op_param(), target);
  }

  // optional .plumber_ir.MaxPool2DOpParamDef max_pool2d_op_param = 102;
  if (has_max_pool2d_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->max_pool2d_op_param(), target);
  }

  // optional .plumber_ir.Conv2DTransposeOpParamDef conv2d_op_transpose_param = 103;
  if (has_conv2d_op_transpose_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->conv2d_op_transpose_param(), target);
  }

  // optional .plumber_ir.SoftmaxOpParamDef softmax_op_param = 104;
  if (has_softmax_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->softmax_op_param(), target);
  }

  // optional .plumber_ir.BatchNormOpParamDef batchnorm_op_param = 105;
  if (has_batchnorm_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->batchnorm_op_param(), target);
  }

  // optional .plumber_ir.FullyConnectedOpParamDef fullyconnected_op_param = 106;
  if (has_fullyconnected_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->fullyconnected_op_param(), target);
  }

  // optional .plumber_ir.DropOutOpParamDef dropout_op_param = 107;
  if (has_dropout_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->dropout_op_param(), target);
  }

  // optional .plumber_ir.FlattenOpParamDef flatten_op_param = 108;
  if (has_flatten_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->flatten_op_param(), target);
  }

  // optional .plumber_ir.ReshapeOpParamDef reshape_op_param = 109;
  if (has_reshape_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->reshape_op_param(), target);
  }

  // optional .plumber_ir.ArgMaxOpParamDef argmax_op_param = 110;
  if (has_argmax_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->argmax_op_param(), target);
  }

  // optional .plumber_ir.LrnOpParamDef lrn_op_param = 111;
  if (has_lrn_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->lrn_op_param(), target);
  }

  // optional .plumber_ir.FloatParamDef float_param = 200;
  if (has_float_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->float_param(), target);
  }

  // optional .plumber_ir.FixedParamDef fixed_param = 201;
  if (has_fixed_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        201, this->fixed_param(), target);
  }

  // optional .plumber_ir.IntParamDef int_param = 202;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        202, this->int_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.DFGNodeDef)
  return target;
}

int DFGNodeDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->op());
    }

    // optional .plumber_ir.DFGNodeDef.Device device = 4 [default = CPU];
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device());
    }

    // optional .plumber_ir.DataType type = 5 [default = T_FLOAT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated string input = 2;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated .plumber_ir.Shape input_shape = 6;
  total_size += 1 * this->input_shape_size();
  for (int i = 0; i < this->input_shape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_shape(i));
  }

  switch (op_param_case()) {
    // optional .plumber_ir.InputOpParamDef input_op_param = 100;
    case kInputOpParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_op_param());
      break;
    }
    // optional .plumber_ir.Conv2DOpParamDef conv2d_op_param = 101;
    case kConv2DOpParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conv2d_op_param());
      break;
    }
    // optional .plumber_ir.MaxPool2DOpParamDef max_pool2d_op_param = 102;
    case kMaxPool2DOpParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_pool2d_op_param());
      break;
    }
    // optional .plumber_ir.Conv2DTransposeOpParamDef conv2d_op_transpose_param = 103;
    case kConv2DOpTransposeParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conv2d_op_transpose_param());
      break;
    }
    // optional .plumber_ir.SoftmaxOpParamDef softmax_op_param = 104;
    case kSoftmaxOpParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->softmax_op_param());
      break;
    }
    // optional .plumber_ir.BatchNormOpParamDef batchnorm_op_param = 105;
    case kBatchnormOpParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batchnorm_op_param());
      break;
    }
    // optional .plumber_ir.FullyConnectedOpParamDef fullyconnected_op_param = 106;
    case kFullyconnectedOpParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fullyconnected_op_param());
      break;
    }
    // optional .plumber_ir.DropOutOpParamDef dropout_op_param = 107;
    case kDropoutOpParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dropout_op_param());
      break;
    }
    // optional .plumber_ir.FlattenOpParamDef flatten_op_param = 108;
    case kFlattenOpParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flatten_op_param());
      break;
    }
    // optional .plumber_ir.ReshapeOpParamDef reshape_op_param = 109;
    case kReshapeOpParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reshape_op_param());
      break;
    }
    // optional .plumber_ir.ArgMaxOpParamDef argmax_op_param = 110;
    case kArgmaxOpParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->argmax_op_param());
      break;
    }
    // optional .plumber_ir.LrnOpParamDef lrn_op_param = 111;
    case kLrnOpParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lrn_op_param());
      break;
    }
    case OP_PARAM_NOT_SET: {
      break;
    }
  }
  switch (type_param_case()) {
    // optional .plumber_ir.FloatParamDef float_param = 200;
    case kFloatParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->float_param());
      break;
    }
    // optional .plumber_ir.FixedParamDef fixed_param = 201;
    case kFixedParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixed_param());
      break;
    }
    // optional .plumber_ir.IntParamDef int_param = 202;
    case kIntParam: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->int_param());
      break;
    }
    case TYPE_PARAM_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DFGNodeDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DFGNodeDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DFGNodeDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DFGNodeDef::MergeFrom(const DFGNodeDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_.MergeFrom(from.input_);
  input_shape_.MergeFrom(from.input_shape_);
  switch (from.op_param_case()) {
    case kInputOpParam: {
      mutable_input_op_param()->::plumber_ir::InputOpParamDef::MergeFrom(from.input_op_param());
      break;
    }
    case kConv2DOpParam: {
      mutable_conv2d_op_param()->::plumber_ir::Conv2DOpParamDef::MergeFrom(from.conv2d_op_param());
      break;
    }
    case kMaxPool2DOpParam: {
      mutable_max_pool2d_op_param()->::plumber_ir::MaxPool2DOpParamDef::MergeFrom(from.max_pool2d_op_param());
      break;
    }
    case kConv2DOpTransposeParam: {
      mutable_conv2d_op_transpose_param()->::plumber_ir::Conv2DTransposeOpParamDef::MergeFrom(from.conv2d_op_transpose_param());
      break;
    }
    case kSoftmaxOpParam: {
      mutable_softmax_op_param()->::plumber_ir::SoftmaxOpParamDef::MergeFrom(from.softmax_op_param());
      break;
    }
    case kBatchnormOpParam: {
      mutable_batchnorm_op_param()->::plumber_ir::BatchNormOpParamDef::MergeFrom(from.batchnorm_op_param());
      break;
    }
    case kFullyconnectedOpParam: {
      mutable_fullyconnected_op_param()->::plumber_ir::FullyConnectedOpParamDef::MergeFrom(from.fullyconnected_op_param());
      break;
    }
    case kDropoutOpParam: {
      mutable_dropout_op_param()->::plumber_ir::DropOutOpParamDef::MergeFrom(from.dropout_op_param());
      break;
    }
    case kFlattenOpParam: {
      mutable_flatten_op_param()->::plumber_ir::FlattenOpParamDef::MergeFrom(from.flatten_op_param());
      break;
    }
    case kReshapeOpParam: {
      mutable_reshape_op_param()->::plumber_ir::ReshapeOpParamDef::MergeFrom(from.reshape_op_param());
      break;
    }
    case kArgmaxOpParam: {
      mutable_argmax_op_param()->::plumber_ir::ArgMaxOpParamDef::MergeFrom(from.argmax_op_param());
      break;
    }
    case kLrnOpParam: {
      mutable_lrn_op_param()->::plumber_ir::LrnOpParamDef::MergeFrom(from.lrn_op_param());
      break;
    }
    case OP_PARAM_NOT_SET: {
      break;
    }
  }
  switch (from.type_param_case()) {
    case kFloatParam: {
      mutable_float_param()->::plumber_ir::FloatParamDef::MergeFrom(from.float_param());
      break;
    }
    case kFixedParam: {
      mutable_fixed_param()->::plumber_ir::FixedParamDef::MergeFrom(from.fixed_param());
      break;
    }
    case kIntParam: {
      mutable_int_param()->::plumber_ir::IntParamDef::MergeFrom(from.int_param());
      break;
    }
    case TYPE_PARAM_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DFGNodeDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DFGNodeDef::CopyFrom(const DFGNodeDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFGNodeDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_input_op_param()) {
    if (!this->input_op_param().IsInitialized()) return false;
  }
  if (has_conv2d_op_param()) {
    if (!this->conv2d_op_param().IsInitialized()) return false;
  }
  if (has_max_pool2d_op_param()) {
    if (!this->max_pool2d_op_param().IsInitialized()) return false;
  }
  if (has_conv2d_op_transpose_param()) {
    if (!this->conv2d_op_transpose_param().IsInitialized()) return false;
  }
  if (has_fullyconnected_op_param()) {
    if (!this->fullyconnected_op_param().IsInitialized()) return false;
  }
  if (has_dropout_op_param()) {
    if (!this->dropout_op_param().IsInitialized()) return false;
  }
  if (has_argmax_op_param()) {
    if (!this->argmax_op_param().IsInitialized()) return false;
  }
  if (has_lrn_op_param()) {
    if (!this->lrn_op_param().IsInitialized()) return false;
  }
  if (has_fixed_param()) {
    if (!this->fixed_param().IsInitialized()) return false;
  }
  return true;
}

void DFGNodeDef::Swap(DFGNodeDef* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    input_.Swap(&other->input_);
    std::swap(op_, other->op_);
    std::swap(device_, other->device_);
    std::swap(type_, other->type_);
    input_shape_.Swap(&other->input_shape_);
    std::swap(op_param_, other->op_param_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(type_param_, other->type_param_);
    std::swap(_oneof_case_[1], other->_oneof_case_[1]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DFGNodeDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DFGNodeDef_descriptor_;
  metadata.reflection = DFGNodeDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DFGDef::kNameFieldNumber;
const int DFGDef::kNodeFieldNumber;
#endif  // !_MSC_VER

DFGDef::DFGDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plumber_ir.DFGDef)
}

void DFGDef::InitAsDefaultInstance() {
}

DFGDef::DFGDef(const DFGDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:plumber_ir.DFGDef)
}

void DFGDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DFGDef::~DFGDef() {
  // @@protoc_insertion_point(destructor:plumber_ir.DFGDef)
  SharedDtor();
}

void DFGDef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DFGDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DFGDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DFGDef_descriptor_;
}

const DFGDef& DFGDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plumber_5fir_2fdfg_5fdef_2eproto();
  return *default_instance_;
}

DFGDef* DFGDef::default_instance_ = NULL;

DFGDef* DFGDef::New() const {
  return new DFGDef;
}

void DFGDef::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DFGDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:plumber_ir.DFGDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // repeated .plumber_ir.DFGNodeDef node = 2;
      case 2: {
        if (tag == 18) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:plumber_ir.DFGDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:plumber_ir.DFGDef)
  return false;
#undef DO_
}

void DFGDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:plumber_ir.DFGDef)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .plumber_ir.DFGNodeDef node = 2;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:plumber_ir.DFGDef)
}

::google::protobuf::uint8* DFGDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:plumber_ir.DFGDef)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .plumber_ir.DFGNodeDef node = 2;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plumber_ir.DFGDef)
  return target;
}

int DFGDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .plumber_ir.DFGNodeDef node = 2;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DFGDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DFGDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DFGDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DFGDef::MergeFrom(const DFGDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DFGDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DFGDef::CopyFrom(const DFGDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFGDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  return true;
}

void DFGDef::Swap(DFGDef* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DFGDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DFGDef_descriptor_;
  metadata.reflection = DFGDef_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace plumber_ir

// @@protoc_insertion_point(global_scope)
