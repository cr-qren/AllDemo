// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plumber_ir/op_param_def.proto

#ifndef PROTOBUF_plumber_5fir_2fop_5fparam_5fdef_2eproto__INCLUDED
#define PROTOBUF_plumber_5fir_2fop_5fparam_5fdef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace plumber_ir {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

class Shape;
class Conv2DOpParamDef;
class MaxPool2DOpParamDef;
class ActivationOpParamDef;
class Conv2DTransposeOpParamDef;
class SoftmaxOpParamDef;
class BatchNormOpParamDef;
class FullyConnectedOpParamDef;
class DropOutOpParamDef;
class FlattenOpParamDef;
class ReshapeOpParamDef;
class ArgMaxOpParamDef;
class LrnOpParamDef;
class InputOpParamDef;

// ===================================================================

class Shape : public ::google::protobuf::Message {
 public:
  Shape();
  virtual ~Shape();

  Shape(const Shape& from);

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Shape& default_instance();

  void Swap(Shape* other);

  // implements Message ----------------------------------------------

  Shape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 dim = 1 [packed = true];
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline ::google::protobuf::int32 dim(int index) const;
  inline void set_dim(int index, ::google::protobuf::int32 value);
  inline void add_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:plumber_ir.Shape)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dim_;
  mutable int _dim_cached_byte_size_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static Shape* default_instance_;
};
// -------------------------------------------------------------------

class Conv2DOpParamDef : public ::google::protobuf::Message {
 public:
  Conv2DOpParamDef();
  virtual ~Conv2DOpParamDef();

  Conv2DOpParamDef(const Conv2DOpParamDef& from);

  inline Conv2DOpParamDef& operator=(const Conv2DOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Conv2DOpParamDef& default_instance();

  void Swap(Conv2DOpParamDef* other);

  // implements Message ----------------------------------------------

  Conv2DOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Conv2DOpParamDef& from);
  void MergeFrom(const Conv2DOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 depth = 2;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 2;
  inline ::google::protobuf::int32 depth() const;
  inline void set_depth(::google::protobuf::int32 value);

  // required int32 kernel_size = 3;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 3;
  inline ::google::protobuf::int32 kernel_size() const;
  inline void set_kernel_size(::google::protobuf::int32 value);

  // optional int32 pad = 4 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 4;
  inline ::google::protobuf::int32 pad() const;
  inline void set_pad(::google::protobuf::int32 value);

  // optional int32 stride = 5 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 5;
  inline ::google::protobuf::int32 stride() const;
  inline void set_stride(::google::protobuf::int32 value);

  // optional string activation_fn = 100 [default = ""];
  inline bool has_activation_fn() const;
  inline void clear_activation_fn();
  static const int kActivationFnFieldNumber = 100;
  inline const ::std::string& activation_fn() const;
  inline void set_activation_fn(const ::std::string& value);
  inline void set_activation_fn(const char* value);
  inline void set_activation_fn(const char* value, size_t size);
  inline ::std::string* mutable_activation_fn();
  inline ::std::string* release_activation_fn();
  inline void set_allocated_activation_fn(::std::string* activation_fn);

  // optional bool use_maxpool_2x2 = 101 [default = false];
  inline bool has_use_maxpool_2x2() const;
  inline void clear_use_maxpool_2x2();
  static const int kUseMaxpool2X2FieldNumber = 101;
  inline bool use_maxpool_2x2() const;
  inline void set_use_maxpool_2x2(bool value);

  // optional bool use_batch_norm = 102 [default = false];
  inline bool has_use_batch_norm() const;
  inline void clear_use_batch_norm();
  static const int kUseBatchNormFieldNumber = 102;
  inline bool use_batch_norm() const;
  inline void set_use_batch_norm(bool value);

  // optional bool use_bias = 103 [default = false];
  inline bool has_use_bias() const;
  inline void clear_use_bias();
  static const int kUseBiasFieldNumber = 103;
  inline bool use_bias() const;
  inline void set_use_bias(bool value);

  // optional bool use_relu = 104 [default = false];
  inline bool has_use_relu() const;
  inline void clear_use_relu();
  static const int kUseReluFieldNumber = 104;
  inline bool use_relu() const;
  inline void set_use_relu(bool value);

  // @@protoc_insertion_point(class_scope:plumber_ir.Conv2DOpParamDef)
 private:
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_activation_fn();
  inline void clear_has_activation_fn();
  inline void set_has_use_maxpool_2x2();
  inline void clear_has_use_maxpool_2x2();
  inline void set_has_use_batch_norm();
  inline void clear_has_use_batch_norm();
  inline void set_has_use_bias();
  inline void clear_has_use_bias();
  inline void set_has_use_relu();
  inline void clear_has_use_relu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 kernel_size_;
  ::google::protobuf::int32 pad_;
  ::google::protobuf::int32 stride_;
  ::std::string* activation_fn_;
  bool use_maxpool_2x2_;
  bool use_batch_norm_;
  bool use_bias_;
  bool use_relu_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static Conv2DOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class MaxPool2DOpParamDef : public ::google::protobuf::Message {
 public:
  MaxPool2DOpParamDef();
  virtual ~MaxPool2DOpParamDef();

  MaxPool2DOpParamDef(const MaxPool2DOpParamDef& from);

  inline MaxPool2DOpParamDef& operator=(const MaxPool2DOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxPool2DOpParamDef& default_instance();

  void Swap(MaxPool2DOpParamDef* other);

  // implements Message ----------------------------------------------

  MaxPool2DOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaxPool2DOpParamDef& from);
  void MergeFrom(const MaxPool2DOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 kernel_size = 1;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 1;
  inline ::google::protobuf::int32 kernel_size() const;
  inline void set_kernel_size(::google::protobuf::int32 value);

  // required int32 stride = 2;
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 2;
  inline ::google::protobuf::int32 stride() const;
  inline void set_stride(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:plumber_ir.MaxPool2DOpParamDef)
 private:
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_stride();
  inline void clear_has_stride();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 kernel_size_;
  ::google::protobuf::int32 stride_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static MaxPool2DOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class ActivationOpParamDef : public ::google::protobuf::Message {
 public:
  ActivationOpParamDef();
  virtual ~ActivationOpParamDef();

  ActivationOpParamDef(const ActivationOpParamDef& from);

  inline ActivationOpParamDef& operator=(const ActivationOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivationOpParamDef& default_instance();

  void Swap(ActivationOpParamDef* other);

  // implements Message ----------------------------------------------

  ActivationOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivationOpParamDef& from);
  void MergeFrom(const ActivationOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:plumber_ir.ActivationOpParamDef)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static ActivationOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class Conv2DTransposeOpParamDef : public ::google::protobuf::Message {
 public:
  Conv2DTransposeOpParamDef();
  virtual ~Conv2DTransposeOpParamDef();

  Conv2DTransposeOpParamDef(const Conv2DTransposeOpParamDef& from);

  inline Conv2DTransposeOpParamDef& operator=(const Conv2DTransposeOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Conv2DTransposeOpParamDef& default_instance();

  void Swap(Conv2DTransposeOpParamDef* other);

  // implements Message ----------------------------------------------

  Conv2DTransposeOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Conv2DTransposeOpParamDef& from);
  void MergeFrom(const Conv2DTransposeOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 depth = 1;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 1;
  inline ::google::protobuf::int32 depth() const;
  inline void set_depth(::google::protobuf::int32 value);

  // required int32 kernel_size = 2;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  inline ::google::protobuf::int32 kernel_size() const;
  inline void set_kernel_size(::google::protobuf::int32 value);

  // optional int32 pad = 3 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 3;
  inline ::google::protobuf::int32 pad() const;
  inline void set_pad(::google::protobuf::int32 value);

  // optional int32 stride = 4 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 4;
  inline ::google::protobuf::int32 stride() const;
  inline void set_stride(::google::protobuf::int32 value);

  // optional string activation_fn = 100 [default = ""];
  inline bool has_activation_fn() const;
  inline void clear_activation_fn();
  static const int kActivationFnFieldNumber = 100;
  inline const ::std::string& activation_fn() const;
  inline void set_activation_fn(const ::std::string& value);
  inline void set_activation_fn(const char* value);
  inline void set_activation_fn(const char* value, size_t size);
  inline ::std::string* mutable_activation_fn();
  inline ::std::string* release_activation_fn();
  inline void set_allocated_activation_fn(::std::string* activation_fn);

  // optional bool use_relu = 101 [default = false];
  inline bool has_use_relu() const;
  inline void clear_use_relu();
  static const int kUseReluFieldNumber = 101;
  inline bool use_relu() const;
  inline void set_use_relu(bool value);

  // @@protoc_insertion_point(class_scope:plumber_ir.Conv2DTransposeOpParamDef)
 private:
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_activation_fn();
  inline void clear_has_activation_fn();
  inline void set_has_use_relu();
  inline void clear_has_use_relu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 kernel_size_;
  ::google::protobuf::int32 pad_;
  ::google::protobuf::int32 stride_;
  ::std::string* activation_fn_;
  bool use_relu_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static Conv2DTransposeOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class SoftmaxOpParamDef : public ::google::protobuf::Message {
 public:
  SoftmaxOpParamDef();
  virtual ~SoftmaxOpParamDef();

  SoftmaxOpParamDef(const SoftmaxOpParamDef& from);

  inline SoftmaxOpParamDef& operator=(const SoftmaxOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxOpParamDef& default_instance();

  void Swap(SoftmaxOpParamDef* other);

  // implements Message ----------------------------------------------

  SoftmaxOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftmaxOpParamDef& from);
  void MergeFrom(const SoftmaxOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .plumber_ir.Shape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::plumber_ir::Shape& shape() const;
  inline ::plumber_ir::Shape* mutable_shape();
  inline ::plumber_ir::Shape* release_shape();
  inline void set_allocated_shape(::plumber_ir::Shape* shape);

  // @@protoc_insertion_point(class_scope:plumber_ir.SoftmaxOpParamDef)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::plumber_ir::Shape* shape_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static SoftmaxOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class BatchNormOpParamDef : public ::google::protobuf::Message {
 public:
  BatchNormOpParamDef();
  virtual ~BatchNormOpParamDef();

  BatchNormOpParamDef(const BatchNormOpParamDef& from);

  inline BatchNormOpParamDef& operator=(const BatchNormOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchNormOpParamDef& default_instance();

  void Swap(BatchNormOpParamDef* other);

  // implements Message ----------------------------------------------

  BatchNormOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchNormOpParamDef& from);
  void MergeFrom(const BatchNormOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string activation_fn = 100 [default = ""];
  inline bool has_activation_fn() const;
  inline void clear_activation_fn();
  static const int kActivationFnFieldNumber = 100;
  inline const ::std::string& activation_fn() const;
  inline void set_activation_fn(const ::std::string& value);
  inline void set_activation_fn(const char* value);
  inline void set_activation_fn(const char* value, size_t size);
  inline ::std::string* mutable_activation_fn();
  inline ::std::string* release_activation_fn();
  inline void set_allocated_activation_fn(::std::string* activation_fn);

  // optional bool use_maxpool_2x2 = 101 [default = false];
  inline bool has_use_maxpool_2x2() const;
  inline void clear_use_maxpool_2x2();
  static const int kUseMaxpool2X2FieldNumber = 101;
  inline bool use_maxpool_2x2() const;
  inline void set_use_maxpool_2x2(bool value);

  // optional bool use_relu = 102 [default = false];
  inline bool has_use_relu() const;
  inline void clear_use_relu();
  static const int kUseReluFieldNumber = 102;
  inline bool use_relu() const;
  inline void set_use_relu(bool value);

  // @@protoc_insertion_point(class_scope:plumber_ir.BatchNormOpParamDef)
 private:
  inline void set_has_activation_fn();
  inline void clear_has_activation_fn();
  inline void set_has_use_maxpool_2x2();
  inline void clear_has_use_maxpool_2x2();
  inline void set_has_use_relu();
  inline void clear_has_use_relu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* activation_fn_;
  bool use_maxpool_2x2_;
  bool use_relu_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static BatchNormOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class FullyConnectedOpParamDef : public ::google::protobuf::Message {
 public:
  FullyConnectedOpParamDef();
  virtual ~FullyConnectedOpParamDef();

  FullyConnectedOpParamDef(const FullyConnectedOpParamDef& from);

  inline FullyConnectedOpParamDef& operator=(const FullyConnectedOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FullyConnectedOpParamDef& default_instance();

  void Swap(FullyConnectedOpParamDef* other);

  // implements Message ----------------------------------------------

  FullyConnectedOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FullyConnectedOpParamDef& from);
  void MergeFrom(const FullyConnectedOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rows = 1;
  inline bool has_rows() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 1;
  inline ::google::protobuf::int32 rows() const;
  inline void set_rows(::google::protobuf::int32 value);

  // required int32 columns = 2;
  inline bool has_columns() const;
  inline void clear_columns();
  static const int kColumnsFieldNumber = 2;
  inline ::google::protobuf::int32 columns() const;
  inline void set_columns(::google::protobuf::int32 value);

  // required int32 batch_size = 3;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 3;
  inline ::google::protobuf::int32 batch_size() const;
  inline void set_batch_size(::google::protobuf::int32 value);

  // optional string activation_fn = 100 [default = ""];
  inline bool has_activation_fn() const;
  inline void clear_activation_fn();
  static const int kActivationFnFieldNumber = 100;
  inline const ::std::string& activation_fn() const;
  inline void set_activation_fn(const ::std::string& value);
  inline void set_activation_fn(const char* value);
  inline void set_activation_fn(const char* value, size_t size);
  inline ::std::string* mutable_activation_fn();
  inline ::std::string* release_activation_fn();
  inline void set_allocated_activation_fn(::std::string* activation_fn);

  // optional bool use_relu = 101 [default = false];
  inline bool has_use_relu() const;
  inline void clear_use_relu();
  static const int kUseReluFieldNumber = 101;
  inline bool use_relu() const;
  inline void set_use_relu(bool value);

  // @@protoc_insertion_point(class_scope:plumber_ir.FullyConnectedOpParamDef)
 private:
  inline void set_has_rows();
  inline void clear_has_rows();
  inline void set_has_columns();
  inline void clear_has_columns();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_activation_fn();
  inline void clear_has_activation_fn();
  inline void set_has_use_relu();
  inline void clear_has_use_relu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 columns_;
  ::std::string* activation_fn_;
  ::google::protobuf::int32 batch_size_;
  bool use_relu_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static FullyConnectedOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class DropOutOpParamDef : public ::google::protobuf::Message {
 public:
  DropOutOpParamDef();
  virtual ~DropOutOpParamDef();

  DropOutOpParamDef(const DropOutOpParamDef& from);

  inline DropOutOpParamDef& operator=(const DropOutOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropOutOpParamDef& default_instance();

  void Swap(DropOutOpParamDef* other);

  // implements Message ----------------------------------------------

  DropOutOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropOutOpParamDef& from);
  void MergeFrom(const DropOutOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float keep_prob = 1;
  inline bool has_keep_prob() const;
  inline void clear_keep_prob();
  static const int kKeepProbFieldNumber = 1;
  inline float keep_prob() const;
  inline void set_keep_prob(float value);

  // @@protoc_insertion_point(class_scope:plumber_ir.DropOutOpParamDef)
 private:
  inline void set_has_keep_prob();
  inline void clear_has_keep_prob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float keep_prob_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static DropOutOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class FlattenOpParamDef : public ::google::protobuf::Message {
 public:
  FlattenOpParamDef();
  virtual ~FlattenOpParamDef();

  FlattenOpParamDef(const FlattenOpParamDef& from);

  inline FlattenOpParamDef& operator=(const FlattenOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlattenOpParamDef& default_instance();

  void Swap(FlattenOpParamDef* other);

  // implements Message ----------------------------------------------

  FlattenOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlattenOpParamDef& from);
  void MergeFrom(const FlattenOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .plumber_ir.Shape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::plumber_ir::Shape& shape() const;
  inline ::plumber_ir::Shape* mutable_shape();
  inline ::plumber_ir::Shape* release_shape();
  inline void set_allocated_shape(::plumber_ir::Shape* shape);

  // @@protoc_insertion_point(class_scope:plumber_ir.FlattenOpParamDef)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::plumber_ir::Shape* shape_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static FlattenOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class ReshapeOpParamDef : public ::google::protobuf::Message {
 public:
  ReshapeOpParamDef();
  virtual ~ReshapeOpParamDef();

  ReshapeOpParamDef(const ReshapeOpParamDef& from);

  inline ReshapeOpParamDef& operator=(const ReshapeOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReshapeOpParamDef& default_instance();

  void Swap(ReshapeOpParamDef* other);

  // implements Message ----------------------------------------------

  ReshapeOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReshapeOpParamDef& from);
  void MergeFrom(const ReshapeOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .plumber_ir.Shape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::plumber_ir::Shape& shape() const;
  inline ::plumber_ir::Shape* mutable_shape();
  inline ::plumber_ir::Shape* release_shape();
  inline void set_allocated_shape(::plumber_ir::Shape* shape);

  // @@protoc_insertion_point(class_scope:plumber_ir.ReshapeOpParamDef)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::plumber_ir::Shape* shape_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static ReshapeOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class ArgMaxOpParamDef : public ::google::protobuf::Message {
 public:
  ArgMaxOpParamDef();
  virtual ~ArgMaxOpParamDef();

  ArgMaxOpParamDef(const ArgMaxOpParamDef& from);

  inline ArgMaxOpParamDef& operator=(const ArgMaxOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgMaxOpParamDef& default_instance();

  void Swap(ArgMaxOpParamDef* other);

  // implements Message ----------------------------------------------

  ArgMaxOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArgMaxOpParamDef& from);
  void MergeFrom(const ArgMaxOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .plumber_ir.Shape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::plumber_ir::Shape& shape() const;
  inline ::plumber_ir::Shape* mutable_shape();
  inline ::plumber_ir::Shape* release_shape();
  inline void set_allocated_shape(::plumber_ir::Shape* shape);

  // required int32 axis = 2 [default = 0];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:plumber_ir.ArgMaxOpParamDef)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::plumber_ir::Shape* shape_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static ArgMaxOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class LrnOpParamDef : public ::google::protobuf::Message {
 public:
  LrnOpParamDef();
  virtual ~LrnOpParamDef();

  LrnOpParamDef(const LrnOpParamDef& from);

  inline LrnOpParamDef& operator=(const LrnOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LrnOpParamDef& default_instance();

  void Swap(LrnOpParamDef* other);

  // implements Message ----------------------------------------------

  LrnOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LrnOpParamDef& from);
  void MergeFrom(const LrnOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 depth_radius = 1 [default = 5];
  inline bool has_depth_radius() const;
  inline void clear_depth_radius();
  static const int kDepthRadiusFieldNumber = 1;
  inline ::google::protobuf::int64 depth_radius() const;
  inline void set_depth_radius(::google::protobuf::int64 value);

  // required float bias = 2 [default = 1];
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 2;
  inline float bias() const;
  inline void set_bias(float value);

  // required float alpha = 3 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 3;
  inline float alpha() const;
  inline void set_alpha(float value);

  // required float beta = 4 [default = 0.5];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 4;
  inline float beta() const;
  inline void set_beta(float value);

  // @@protoc_insertion_point(class_scope:plumber_ir.LrnOpParamDef)
 private:
  inline void set_has_depth_radius();
  inline void clear_has_depth_radius();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 depth_radius_;
  float bias_;
  float alpha_;
  float beta_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static LrnOpParamDef* default_instance_;
};
// -------------------------------------------------------------------

class InputOpParamDef : public ::google::protobuf::Message {
 public:
  InputOpParamDef();
  virtual ~InputOpParamDef();

  InputOpParamDef(const InputOpParamDef& from);

  inline InputOpParamDef& operator=(const InputOpParamDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputOpParamDef& default_instance();

  void Swap(InputOpParamDef* other);

  // implements Message ----------------------------------------------

  InputOpParamDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputOpParamDef& from);
  void MergeFrom(const InputOpParamDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .plumber_ir.Shape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::plumber_ir::Shape& shape() const;
  inline ::plumber_ir::Shape* mutable_shape();
  inline ::plumber_ir::Shape* release_shape();
  inline void set_allocated_shape(::plumber_ir::Shape* shape);

  // @@protoc_insertion_point(class_scope:plumber_ir.InputOpParamDef)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::plumber_ir::Shape* shape_;
  friend void  protobuf_AddDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_AssignDesc_plumber_5fir_2fop_5fparam_5fdef_2eproto();
  friend void protobuf_ShutdownFile_plumber_5fir_2fop_5fparam_5fdef_2eproto();

  void InitAsDefaultInstance();
  static InputOpParamDef* default_instance_;
};
// ===================================================================


// ===================================================================

// Shape

// repeated int32 dim = 1 [packed = true];
inline int Shape::dim_size() const {
  return dim_.size();
}
inline void Shape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int32 Shape::dim(int index) const {
  // @@protoc_insertion_point(field_get:plumber_ir.Shape.dim)
  return dim_.Get(index);
}
inline void Shape::set_dim(int index, ::google::protobuf::int32 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:plumber_ir.Shape.dim)
}
inline void Shape::add_dim(::google::protobuf::int32 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:plumber_ir.Shape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Shape::dim() const {
  // @@protoc_insertion_point(field_list:plumber_ir.Shape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Shape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:plumber_ir.Shape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// Conv2DOpParamDef

// required int32 depth = 2;
inline bool Conv2DOpParamDef::has_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Conv2DOpParamDef::set_has_depth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Conv2DOpParamDef::clear_has_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Conv2DOpParamDef::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 Conv2DOpParamDef::depth() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DOpParamDef.depth)
  return depth_;
}
inline void Conv2DOpParamDef::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DOpParamDef.depth)
}

// required int32 kernel_size = 3;
inline bool Conv2DOpParamDef::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Conv2DOpParamDef::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Conv2DOpParamDef::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Conv2DOpParamDef::clear_kernel_size() {
  kernel_size_ = 0;
  clear_has_kernel_size();
}
inline ::google::protobuf::int32 Conv2DOpParamDef::kernel_size() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DOpParamDef.kernel_size)
  return kernel_size_;
}
inline void Conv2DOpParamDef::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DOpParamDef.kernel_size)
}

// optional int32 pad = 4 [default = 0];
inline bool Conv2DOpParamDef::has_pad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Conv2DOpParamDef::set_has_pad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Conv2DOpParamDef::clear_has_pad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Conv2DOpParamDef::clear_pad() {
  pad_ = 0;
  clear_has_pad();
}
inline ::google::protobuf::int32 Conv2DOpParamDef::pad() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DOpParamDef.pad)
  return pad_;
}
inline void Conv2DOpParamDef::set_pad(::google::protobuf::int32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DOpParamDef.pad)
}

// optional int32 stride = 5 [default = 1];
inline bool Conv2DOpParamDef::has_stride() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Conv2DOpParamDef::set_has_stride() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Conv2DOpParamDef::clear_has_stride() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Conv2DOpParamDef::clear_stride() {
  stride_ = 1;
  clear_has_stride();
}
inline ::google::protobuf::int32 Conv2DOpParamDef::stride() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DOpParamDef.stride)
  return stride_;
}
inline void Conv2DOpParamDef::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DOpParamDef.stride)
}

// optional string activation_fn = 100 [default = ""];
inline bool Conv2DOpParamDef::has_activation_fn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Conv2DOpParamDef::set_has_activation_fn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Conv2DOpParamDef::clear_has_activation_fn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Conv2DOpParamDef::clear_activation_fn() {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_->clear();
  }
  clear_has_activation_fn();
}
inline const ::std::string& Conv2DOpParamDef::activation_fn() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DOpParamDef.activation_fn)
  return *activation_fn_;
}
inline void Conv2DOpParamDef::set_activation_fn(const ::std::string& value) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(value);
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DOpParamDef.activation_fn)
}
inline void Conv2DOpParamDef::set_activation_fn(const char* value) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(value);
  // @@protoc_insertion_point(field_set_char:plumber_ir.Conv2DOpParamDef.activation_fn)
}
inline void Conv2DOpParamDef::set_activation_fn(const char* value, size_t size) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plumber_ir.Conv2DOpParamDef.activation_fn)
}
inline ::std::string* Conv2DOpParamDef::mutable_activation_fn() {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:plumber_ir.Conv2DOpParamDef.activation_fn)
  return activation_fn_;
}
inline ::std::string* Conv2DOpParamDef::release_activation_fn() {
  clear_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = activation_fn_;
    activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Conv2DOpParamDef::set_allocated_activation_fn(::std::string* activation_fn) {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activation_fn_;
  }
  if (activation_fn) {
    set_has_activation_fn();
    activation_fn_ = activation_fn;
  } else {
    clear_has_activation_fn();
    activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:plumber_ir.Conv2DOpParamDef.activation_fn)
}

// optional bool use_maxpool_2x2 = 101 [default = false];
inline bool Conv2DOpParamDef::has_use_maxpool_2x2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Conv2DOpParamDef::set_has_use_maxpool_2x2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Conv2DOpParamDef::clear_has_use_maxpool_2x2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Conv2DOpParamDef::clear_use_maxpool_2x2() {
  use_maxpool_2x2_ = false;
  clear_has_use_maxpool_2x2();
}
inline bool Conv2DOpParamDef::use_maxpool_2x2() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DOpParamDef.use_maxpool_2x2)
  return use_maxpool_2x2_;
}
inline void Conv2DOpParamDef::set_use_maxpool_2x2(bool value) {
  set_has_use_maxpool_2x2();
  use_maxpool_2x2_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DOpParamDef.use_maxpool_2x2)
}

// optional bool use_batch_norm = 102 [default = false];
inline bool Conv2DOpParamDef::has_use_batch_norm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Conv2DOpParamDef::set_has_use_batch_norm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Conv2DOpParamDef::clear_has_use_batch_norm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Conv2DOpParamDef::clear_use_batch_norm() {
  use_batch_norm_ = false;
  clear_has_use_batch_norm();
}
inline bool Conv2DOpParamDef::use_batch_norm() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DOpParamDef.use_batch_norm)
  return use_batch_norm_;
}
inline void Conv2DOpParamDef::set_use_batch_norm(bool value) {
  set_has_use_batch_norm();
  use_batch_norm_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DOpParamDef.use_batch_norm)
}

// optional bool use_bias = 103 [default = false];
inline bool Conv2DOpParamDef::has_use_bias() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Conv2DOpParamDef::set_has_use_bias() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Conv2DOpParamDef::clear_has_use_bias() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Conv2DOpParamDef::clear_use_bias() {
  use_bias_ = false;
  clear_has_use_bias();
}
inline bool Conv2DOpParamDef::use_bias() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DOpParamDef.use_bias)
  return use_bias_;
}
inline void Conv2DOpParamDef::set_use_bias(bool value) {
  set_has_use_bias();
  use_bias_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DOpParamDef.use_bias)
}

// optional bool use_relu = 104 [default = false];
inline bool Conv2DOpParamDef::has_use_relu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Conv2DOpParamDef::set_has_use_relu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Conv2DOpParamDef::clear_has_use_relu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Conv2DOpParamDef::clear_use_relu() {
  use_relu_ = false;
  clear_has_use_relu();
}
inline bool Conv2DOpParamDef::use_relu() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DOpParamDef.use_relu)
  return use_relu_;
}
inline void Conv2DOpParamDef::set_use_relu(bool value) {
  set_has_use_relu();
  use_relu_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DOpParamDef.use_relu)
}

// -------------------------------------------------------------------

// MaxPool2DOpParamDef

// required int32 kernel_size = 1;
inline bool MaxPool2DOpParamDef::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaxPool2DOpParamDef::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaxPool2DOpParamDef::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaxPool2DOpParamDef::clear_kernel_size() {
  kernel_size_ = 0;
  clear_has_kernel_size();
}
inline ::google::protobuf::int32 MaxPool2DOpParamDef::kernel_size() const {
  // @@protoc_insertion_point(field_get:plumber_ir.MaxPool2DOpParamDef.kernel_size)
  return kernel_size_;
}
inline void MaxPool2DOpParamDef::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.MaxPool2DOpParamDef.kernel_size)
}

// required int32 stride = 2;
inline bool MaxPool2DOpParamDef::has_stride() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaxPool2DOpParamDef::set_has_stride() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaxPool2DOpParamDef::clear_has_stride() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaxPool2DOpParamDef::clear_stride() {
  stride_ = 0;
  clear_has_stride();
}
inline ::google::protobuf::int32 MaxPool2DOpParamDef::stride() const {
  // @@protoc_insertion_point(field_get:plumber_ir.MaxPool2DOpParamDef.stride)
  return stride_;
}
inline void MaxPool2DOpParamDef::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.MaxPool2DOpParamDef.stride)
}

// -------------------------------------------------------------------

// ActivationOpParamDef

// required string type = 1;
inline bool ActivationOpParamDef::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivationOpParamDef::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivationOpParamDef::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivationOpParamDef::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& ActivationOpParamDef::type() const {
  // @@protoc_insertion_point(field_get:plumber_ir.ActivationOpParamDef.type)
  return *type_;
}
inline void ActivationOpParamDef::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:plumber_ir.ActivationOpParamDef.type)
}
inline void ActivationOpParamDef::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:plumber_ir.ActivationOpParamDef.type)
}
inline void ActivationOpParamDef::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plumber_ir.ActivationOpParamDef.type)
}
inline ::std::string* ActivationOpParamDef::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:plumber_ir.ActivationOpParamDef.type)
  return type_;
}
inline ::std::string* ActivationOpParamDef::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActivationOpParamDef::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:plumber_ir.ActivationOpParamDef.type)
}

// -------------------------------------------------------------------

// Conv2DTransposeOpParamDef

// required int32 depth = 1;
inline bool Conv2DTransposeOpParamDef::has_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Conv2DTransposeOpParamDef::set_has_depth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Conv2DTransposeOpParamDef::clear_has_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Conv2DTransposeOpParamDef::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 Conv2DTransposeOpParamDef::depth() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DTransposeOpParamDef.depth)
  return depth_;
}
inline void Conv2DTransposeOpParamDef::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DTransposeOpParamDef.depth)
}

// required int32 kernel_size = 2;
inline bool Conv2DTransposeOpParamDef::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Conv2DTransposeOpParamDef::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Conv2DTransposeOpParamDef::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Conv2DTransposeOpParamDef::clear_kernel_size() {
  kernel_size_ = 0;
  clear_has_kernel_size();
}
inline ::google::protobuf::int32 Conv2DTransposeOpParamDef::kernel_size() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DTransposeOpParamDef.kernel_size)
  return kernel_size_;
}
inline void Conv2DTransposeOpParamDef::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DTransposeOpParamDef.kernel_size)
}

// optional int32 pad = 3 [default = 0];
inline bool Conv2DTransposeOpParamDef::has_pad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Conv2DTransposeOpParamDef::set_has_pad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Conv2DTransposeOpParamDef::clear_has_pad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Conv2DTransposeOpParamDef::clear_pad() {
  pad_ = 0;
  clear_has_pad();
}
inline ::google::protobuf::int32 Conv2DTransposeOpParamDef::pad() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DTransposeOpParamDef.pad)
  return pad_;
}
inline void Conv2DTransposeOpParamDef::set_pad(::google::protobuf::int32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DTransposeOpParamDef.pad)
}

// optional int32 stride = 4 [default = 1];
inline bool Conv2DTransposeOpParamDef::has_stride() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Conv2DTransposeOpParamDef::set_has_stride() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Conv2DTransposeOpParamDef::clear_has_stride() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Conv2DTransposeOpParamDef::clear_stride() {
  stride_ = 1;
  clear_has_stride();
}
inline ::google::protobuf::int32 Conv2DTransposeOpParamDef::stride() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DTransposeOpParamDef.stride)
  return stride_;
}
inline void Conv2DTransposeOpParamDef::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DTransposeOpParamDef.stride)
}

// optional string activation_fn = 100 [default = ""];
inline bool Conv2DTransposeOpParamDef::has_activation_fn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Conv2DTransposeOpParamDef::set_has_activation_fn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Conv2DTransposeOpParamDef::clear_has_activation_fn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Conv2DTransposeOpParamDef::clear_activation_fn() {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_->clear();
  }
  clear_has_activation_fn();
}
inline const ::std::string& Conv2DTransposeOpParamDef::activation_fn() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DTransposeOpParamDef.activation_fn)
  return *activation_fn_;
}
inline void Conv2DTransposeOpParamDef::set_activation_fn(const ::std::string& value) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(value);
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DTransposeOpParamDef.activation_fn)
}
inline void Conv2DTransposeOpParamDef::set_activation_fn(const char* value) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(value);
  // @@protoc_insertion_point(field_set_char:plumber_ir.Conv2DTransposeOpParamDef.activation_fn)
}
inline void Conv2DTransposeOpParamDef::set_activation_fn(const char* value, size_t size) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plumber_ir.Conv2DTransposeOpParamDef.activation_fn)
}
inline ::std::string* Conv2DTransposeOpParamDef::mutable_activation_fn() {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:plumber_ir.Conv2DTransposeOpParamDef.activation_fn)
  return activation_fn_;
}
inline ::std::string* Conv2DTransposeOpParamDef::release_activation_fn() {
  clear_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = activation_fn_;
    activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Conv2DTransposeOpParamDef::set_allocated_activation_fn(::std::string* activation_fn) {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activation_fn_;
  }
  if (activation_fn) {
    set_has_activation_fn();
    activation_fn_ = activation_fn;
  } else {
    clear_has_activation_fn();
    activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:plumber_ir.Conv2DTransposeOpParamDef.activation_fn)
}

// optional bool use_relu = 101 [default = false];
inline bool Conv2DTransposeOpParamDef::has_use_relu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Conv2DTransposeOpParamDef::set_has_use_relu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Conv2DTransposeOpParamDef::clear_has_use_relu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Conv2DTransposeOpParamDef::clear_use_relu() {
  use_relu_ = false;
  clear_has_use_relu();
}
inline bool Conv2DTransposeOpParamDef::use_relu() const {
  // @@protoc_insertion_point(field_get:plumber_ir.Conv2DTransposeOpParamDef.use_relu)
  return use_relu_;
}
inline void Conv2DTransposeOpParamDef::set_use_relu(bool value) {
  set_has_use_relu();
  use_relu_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.Conv2DTransposeOpParamDef.use_relu)
}

// -------------------------------------------------------------------

// SoftmaxOpParamDef

// optional .plumber_ir.Shape shape = 1;
inline bool SoftmaxOpParamDef::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxOpParamDef::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxOpParamDef::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxOpParamDef::clear_shape() {
  if (shape_ != NULL) shape_->::plumber_ir::Shape::Clear();
  clear_has_shape();
}
inline const ::plumber_ir::Shape& SoftmaxOpParamDef::shape() const {
  // @@protoc_insertion_point(field_get:plumber_ir.SoftmaxOpParamDef.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::plumber_ir::Shape* SoftmaxOpParamDef::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::plumber_ir::Shape;
  // @@protoc_insertion_point(field_mutable:plumber_ir.SoftmaxOpParamDef.shape)
  return shape_;
}
inline ::plumber_ir::Shape* SoftmaxOpParamDef::release_shape() {
  clear_has_shape();
  ::plumber_ir::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void SoftmaxOpParamDef::set_allocated_shape(::plumber_ir::Shape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:plumber_ir.SoftmaxOpParamDef.shape)
}

// -------------------------------------------------------------------

// BatchNormOpParamDef

// optional string activation_fn = 100 [default = ""];
inline bool BatchNormOpParamDef::has_activation_fn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchNormOpParamDef::set_has_activation_fn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchNormOpParamDef::clear_has_activation_fn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchNormOpParamDef::clear_activation_fn() {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_->clear();
  }
  clear_has_activation_fn();
}
inline const ::std::string& BatchNormOpParamDef::activation_fn() const {
  // @@protoc_insertion_point(field_get:plumber_ir.BatchNormOpParamDef.activation_fn)
  return *activation_fn_;
}
inline void BatchNormOpParamDef::set_activation_fn(const ::std::string& value) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(value);
  // @@protoc_insertion_point(field_set:plumber_ir.BatchNormOpParamDef.activation_fn)
}
inline void BatchNormOpParamDef::set_activation_fn(const char* value) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(value);
  // @@protoc_insertion_point(field_set_char:plumber_ir.BatchNormOpParamDef.activation_fn)
}
inline void BatchNormOpParamDef::set_activation_fn(const char* value, size_t size) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plumber_ir.BatchNormOpParamDef.activation_fn)
}
inline ::std::string* BatchNormOpParamDef::mutable_activation_fn() {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:plumber_ir.BatchNormOpParamDef.activation_fn)
  return activation_fn_;
}
inline ::std::string* BatchNormOpParamDef::release_activation_fn() {
  clear_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = activation_fn_;
    activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BatchNormOpParamDef::set_allocated_activation_fn(::std::string* activation_fn) {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activation_fn_;
  }
  if (activation_fn) {
    set_has_activation_fn();
    activation_fn_ = activation_fn;
  } else {
    clear_has_activation_fn();
    activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:plumber_ir.BatchNormOpParamDef.activation_fn)
}

// optional bool use_maxpool_2x2 = 101 [default = false];
inline bool BatchNormOpParamDef::has_use_maxpool_2x2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchNormOpParamDef::set_has_use_maxpool_2x2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchNormOpParamDef::clear_has_use_maxpool_2x2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchNormOpParamDef::clear_use_maxpool_2x2() {
  use_maxpool_2x2_ = false;
  clear_has_use_maxpool_2x2();
}
inline bool BatchNormOpParamDef::use_maxpool_2x2() const {
  // @@protoc_insertion_point(field_get:plumber_ir.BatchNormOpParamDef.use_maxpool_2x2)
  return use_maxpool_2x2_;
}
inline void BatchNormOpParamDef::set_use_maxpool_2x2(bool value) {
  set_has_use_maxpool_2x2();
  use_maxpool_2x2_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.BatchNormOpParamDef.use_maxpool_2x2)
}

// optional bool use_relu = 102 [default = false];
inline bool BatchNormOpParamDef::has_use_relu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchNormOpParamDef::set_has_use_relu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchNormOpParamDef::clear_has_use_relu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchNormOpParamDef::clear_use_relu() {
  use_relu_ = false;
  clear_has_use_relu();
}
inline bool BatchNormOpParamDef::use_relu() const {
  // @@protoc_insertion_point(field_get:plumber_ir.BatchNormOpParamDef.use_relu)
  return use_relu_;
}
inline void BatchNormOpParamDef::set_use_relu(bool value) {
  set_has_use_relu();
  use_relu_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.BatchNormOpParamDef.use_relu)
}

// -------------------------------------------------------------------

// FullyConnectedOpParamDef

// required int32 rows = 1;
inline bool FullyConnectedOpParamDef::has_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FullyConnectedOpParamDef::set_has_rows() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FullyConnectedOpParamDef::clear_has_rows() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FullyConnectedOpParamDef::clear_rows() {
  rows_ = 0;
  clear_has_rows();
}
inline ::google::protobuf::int32 FullyConnectedOpParamDef::rows() const {
  // @@protoc_insertion_point(field_get:plumber_ir.FullyConnectedOpParamDef.rows)
  return rows_;
}
inline void FullyConnectedOpParamDef::set_rows(::google::protobuf::int32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.FullyConnectedOpParamDef.rows)
}

// required int32 columns = 2;
inline bool FullyConnectedOpParamDef::has_columns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FullyConnectedOpParamDef::set_has_columns() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FullyConnectedOpParamDef::clear_has_columns() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FullyConnectedOpParamDef::clear_columns() {
  columns_ = 0;
  clear_has_columns();
}
inline ::google::protobuf::int32 FullyConnectedOpParamDef::columns() const {
  // @@protoc_insertion_point(field_get:plumber_ir.FullyConnectedOpParamDef.columns)
  return columns_;
}
inline void FullyConnectedOpParamDef::set_columns(::google::protobuf::int32 value) {
  set_has_columns();
  columns_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.FullyConnectedOpParamDef.columns)
}

// required int32 batch_size = 3;
inline bool FullyConnectedOpParamDef::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FullyConnectedOpParamDef::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FullyConnectedOpParamDef::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FullyConnectedOpParamDef::clear_batch_size() {
  batch_size_ = 0;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 FullyConnectedOpParamDef::batch_size() const {
  // @@protoc_insertion_point(field_get:plumber_ir.FullyConnectedOpParamDef.batch_size)
  return batch_size_;
}
inline void FullyConnectedOpParamDef::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.FullyConnectedOpParamDef.batch_size)
}

// optional string activation_fn = 100 [default = ""];
inline bool FullyConnectedOpParamDef::has_activation_fn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FullyConnectedOpParamDef::set_has_activation_fn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FullyConnectedOpParamDef::clear_has_activation_fn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FullyConnectedOpParamDef::clear_activation_fn() {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_->clear();
  }
  clear_has_activation_fn();
}
inline const ::std::string& FullyConnectedOpParamDef::activation_fn() const {
  // @@protoc_insertion_point(field_get:plumber_ir.FullyConnectedOpParamDef.activation_fn)
  return *activation_fn_;
}
inline void FullyConnectedOpParamDef::set_activation_fn(const ::std::string& value) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(value);
  // @@protoc_insertion_point(field_set:plumber_ir.FullyConnectedOpParamDef.activation_fn)
}
inline void FullyConnectedOpParamDef::set_activation_fn(const char* value) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(value);
  // @@protoc_insertion_point(field_set_char:plumber_ir.FullyConnectedOpParamDef.activation_fn)
}
inline void FullyConnectedOpParamDef::set_activation_fn(const char* value, size_t size) {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  activation_fn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plumber_ir.FullyConnectedOpParamDef.activation_fn)
}
inline ::std::string* FullyConnectedOpParamDef::mutable_activation_fn() {
  set_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    activation_fn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:plumber_ir.FullyConnectedOpParamDef.activation_fn)
  return activation_fn_;
}
inline ::std::string* FullyConnectedOpParamDef::release_activation_fn() {
  clear_has_activation_fn();
  if (activation_fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = activation_fn_;
    activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FullyConnectedOpParamDef::set_allocated_activation_fn(::std::string* activation_fn) {
  if (activation_fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activation_fn_;
  }
  if (activation_fn) {
    set_has_activation_fn();
    activation_fn_ = activation_fn;
  } else {
    clear_has_activation_fn();
    activation_fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:plumber_ir.FullyConnectedOpParamDef.activation_fn)
}

// optional bool use_relu = 101 [default = false];
inline bool FullyConnectedOpParamDef::has_use_relu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FullyConnectedOpParamDef::set_has_use_relu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FullyConnectedOpParamDef::clear_has_use_relu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FullyConnectedOpParamDef::clear_use_relu() {
  use_relu_ = false;
  clear_has_use_relu();
}
inline bool FullyConnectedOpParamDef::use_relu() const {
  // @@protoc_insertion_point(field_get:plumber_ir.FullyConnectedOpParamDef.use_relu)
  return use_relu_;
}
inline void FullyConnectedOpParamDef::set_use_relu(bool value) {
  set_has_use_relu();
  use_relu_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.FullyConnectedOpParamDef.use_relu)
}

// -------------------------------------------------------------------

// DropOutOpParamDef

// required float keep_prob = 1;
inline bool DropOutOpParamDef::has_keep_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropOutOpParamDef::set_has_keep_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropOutOpParamDef::clear_has_keep_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropOutOpParamDef::clear_keep_prob() {
  keep_prob_ = 0;
  clear_has_keep_prob();
}
inline float DropOutOpParamDef::keep_prob() const {
  // @@protoc_insertion_point(field_get:plumber_ir.DropOutOpParamDef.keep_prob)
  return keep_prob_;
}
inline void DropOutOpParamDef::set_keep_prob(float value) {
  set_has_keep_prob();
  keep_prob_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.DropOutOpParamDef.keep_prob)
}

// -------------------------------------------------------------------

// FlattenOpParamDef

// optional .plumber_ir.Shape shape = 1;
inline bool FlattenOpParamDef::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlattenOpParamDef::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlattenOpParamDef::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlattenOpParamDef::clear_shape() {
  if (shape_ != NULL) shape_->::plumber_ir::Shape::Clear();
  clear_has_shape();
}
inline const ::plumber_ir::Shape& FlattenOpParamDef::shape() const {
  // @@protoc_insertion_point(field_get:plumber_ir.FlattenOpParamDef.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::plumber_ir::Shape* FlattenOpParamDef::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::plumber_ir::Shape;
  // @@protoc_insertion_point(field_mutable:plumber_ir.FlattenOpParamDef.shape)
  return shape_;
}
inline ::plumber_ir::Shape* FlattenOpParamDef::release_shape() {
  clear_has_shape();
  ::plumber_ir::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void FlattenOpParamDef::set_allocated_shape(::plumber_ir::Shape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:plumber_ir.FlattenOpParamDef.shape)
}

// -------------------------------------------------------------------

// ReshapeOpParamDef

// optional .plumber_ir.Shape shape = 1;
inline bool ReshapeOpParamDef::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReshapeOpParamDef::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReshapeOpParamDef::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReshapeOpParamDef::clear_shape() {
  if (shape_ != NULL) shape_->::plumber_ir::Shape::Clear();
  clear_has_shape();
}
inline const ::plumber_ir::Shape& ReshapeOpParamDef::shape() const {
  // @@protoc_insertion_point(field_get:plumber_ir.ReshapeOpParamDef.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::plumber_ir::Shape* ReshapeOpParamDef::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::plumber_ir::Shape;
  // @@protoc_insertion_point(field_mutable:plumber_ir.ReshapeOpParamDef.shape)
  return shape_;
}
inline ::plumber_ir::Shape* ReshapeOpParamDef::release_shape() {
  clear_has_shape();
  ::plumber_ir::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ReshapeOpParamDef::set_allocated_shape(::plumber_ir::Shape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:plumber_ir.ReshapeOpParamDef.shape)
}

// -------------------------------------------------------------------

// ArgMaxOpParamDef

// optional .plumber_ir.Shape shape = 1;
inline bool ArgMaxOpParamDef::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArgMaxOpParamDef::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArgMaxOpParamDef::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArgMaxOpParamDef::clear_shape() {
  if (shape_ != NULL) shape_->::plumber_ir::Shape::Clear();
  clear_has_shape();
}
inline const ::plumber_ir::Shape& ArgMaxOpParamDef::shape() const {
  // @@protoc_insertion_point(field_get:plumber_ir.ArgMaxOpParamDef.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::plumber_ir::Shape* ArgMaxOpParamDef::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::plumber_ir::Shape;
  // @@protoc_insertion_point(field_mutable:plumber_ir.ArgMaxOpParamDef.shape)
  return shape_;
}
inline ::plumber_ir::Shape* ArgMaxOpParamDef::release_shape() {
  clear_has_shape();
  ::plumber_ir::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ArgMaxOpParamDef::set_allocated_shape(::plumber_ir::Shape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:plumber_ir.ArgMaxOpParamDef.shape)
}

// required int32 axis = 2 [default = 0];
inline bool ArgMaxOpParamDef::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArgMaxOpParamDef::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArgMaxOpParamDef::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArgMaxOpParamDef::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ArgMaxOpParamDef::axis() const {
  // @@protoc_insertion_point(field_get:plumber_ir.ArgMaxOpParamDef.axis)
  return axis_;
}
inline void ArgMaxOpParamDef::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.ArgMaxOpParamDef.axis)
}

// -------------------------------------------------------------------

// LrnOpParamDef

// required int64 depth_radius = 1 [default = 5];
inline bool LrnOpParamDef::has_depth_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LrnOpParamDef::set_has_depth_radius() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LrnOpParamDef::clear_has_depth_radius() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LrnOpParamDef::clear_depth_radius() {
  depth_radius_ = GOOGLE_LONGLONG(5);
  clear_has_depth_radius();
}
inline ::google::protobuf::int64 LrnOpParamDef::depth_radius() const {
  // @@protoc_insertion_point(field_get:plumber_ir.LrnOpParamDef.depth_radius)
  return depth_radius_;
}
inline void LrnOpParamDef::set_depth_radius(::google::protobuf::int64 value) {
  set_has_depth_radius();
  depth_radius_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.LrnOpParamDef.depth_radius)
}

// required float bias = 2 [default = 1];
inline bool LrnOpParamDef::has_bias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LrnOpParamDef::set_has_bias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LrnOpParamDef::clear_has_bias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LrnOpParamDef::clear_bias() {
  bias_ = 1;
  clear_has_bias();
}
inline float LrnOpParamDef::bias() const {
  // @@protoc_insertion_point(field_get:plumber_ir.LrnOpParamDef.bias)
  return bias_;
}
inline void LrnOpParamDef::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.LrnOpParamDef.bias)
}

// required float alpha = 3 [default = 1];
inline bool LrnOpParamDef::has_alpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LrnOpParamDef::set_has_alpha() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LrnOpParamDef::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LrnOpParamDef::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LrnOpParamDef::alpha() const {
  // @@protoc_insertion_point(field_get:plumber_ir.LrnOpParamDef.alpha)
  return alpha_;
}
inline void LrnOpParamDef::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.LrnOpParamDef.alpha)
}

// required float beta = 4 [default = 0.5];
inline bool LrnOpParamDef::has_beta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LrnOpParamDef::set_has_beta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LrnOpParamDef::clear_has_beta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LrnOpParamDef::clear_beta() {
  beta_ = 0.5f;
  clear_has_beta();
}
inline float LrnOpParamDef::beta() const {
  // @@protoc_insertion_point(field_get:plumber_ir.LrnOpParamDef.beta)
  return beta_;
}
inline void LrnOpParamDef::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:plumber_ir.LrnOpParamDef.beta)
}

// -------------------------------------------------------------------

// InputOpParamDef

// required .plumber_ir.Shape shape = 1;
inline bool InputOpParamDef::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InputOpParamDef::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InputOpParamDef::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InputOpParamDef::clear_shape() {
  if (shape_ != NULL) shape_->::plumber_ir::Shape::Clear();
  clear_has_shape();
}
inline const ::plumber_ir::Shape& InputOpParamDef::shape() const {
  // @@protoc_insertion_point(field_get:plumber_ir.InputOpParamDef.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::plumber_ir::Shape* InputOpParamDef::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::plumber_ir::Shape;
  // @@protoc_insertion_point(field_mutable:plumber_ir.InputOpParamDef.shape)
  return shape_;
}
inline ::plumber_ir::Shape* InputOpParamDef::release_shape() {
  clear_has_shape();
  ::plumber_ir::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void InputOpParamDef::set_allocated_shape(::plumber_ir::Shape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:plumber_ir.InputOpParamDef.shape)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace plumber_ir

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_plumber_5fir_2fop_5fparam_5fdef_2eproto__INCLUDED
